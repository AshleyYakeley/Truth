let

### Useful UI.Element stuff

# A window that comes with some menus.
stdWindow: WholeRef +Text -> [UI.MenuItem] -> UI.Element -> Action UI.Window;
stdWindow title moremenus contents = fixAction $ \window -> let
    menus: [UI.MenuItem];
    menus =
        [
            UI.menuSubmenu "File"
            [
                UI.menuAction "Close" (Just "Ctrl+W") {UI.closeWindow window},
                UI.menuSeparator,
                UI.menuAction "Exit" (Just "Ctrl+Q") {UI.exitUI}
            ],
            UI.menuSubmenu "Edit"
            [
                UI.menuAction "Undo" (Just "Ctrl+Z") {queueUndo},
                UI.menuAction "Redo" (Just "Ctrl+Y") {queueRedo}
            ]
        ] ++ moremenus;
    in UI.openWindow (600,800) title {menus} $ UI.scrolled contents;

selectionWindow:
    Text -> # window title
    SetRef item -> # the set of items
    [(item -> Action ()) -> UI.MenuItem] -> # Menu items for creating new items
    (item -> Action Any) -> # what to do when an item is activated
    (WholeRef item -> UI.Element) ->
    Action UI.Window;
selectionWindow wtitle iset createMenuItems iopen iui = do
    selection <- newMemWhole;
    let
        viewItem: Action ();
        viewItem = do
            item <- get selection;
            iopen item;
            return ();
            end;

        deleteItem: Action ();
        deleteItem = do
            item <- get selection;
            iset -= item;
            end;

        moremenus: [UI.MenuItem];
        moremenus =
            [
                UI.menuSubmenu "Selection" $ mapList (\mi -> mi $ \i -> selection := i) createMenuItems ++
                [
                    UI.menuAction "View" Nothing {viewItem},
                    UI.menuAction "Delete" Nothing {deleteItem}
                ]
            ];
        in stdWindow {wtitle} moremenus (iui selection);
    end;

# This is a two-pane window, the left has a "selector" of items (e.g. a table), and the right shows the selected item.
selectionPairWindow:
    Text -> # window title
    SetRef item -> # the set of items
    [(item -> Action ()) -> UI.MenuItem] -> # Menu items for creating new items
    (item -> Action Any) -> # what to do when an item is activated
    (WholeRef item -> UI.Element) -> # UI.Element for the item selector
    (WholeRef +item -> UI.Element) -> # UI.Element for the selected item
    Action UI.Window;
selectionPairWindow wtitle iset createMenuItems iopen getSelectorUI getSelectedUI =
    selectionWindow wtitle iset createMenuItems iopen $ \selection -> let
        sidebarUI: UI.Element;
        sidebarUI = getSelectorUI selection;

        selectedUI: UI.Element;
        selectedUI = getSelectedUI $ immutWhole selection;

        in UI.horizontal [(False,sidebarUI),(True,selectedUI)];

uiPage: WholeRef +Text -> UI.Element -> (UI.Element,UI.Element);
uiPage n ui = (UI.label n,ui);

uiLabelled: WholeRef +Text -> UI.Element -> UI.Element;
uiLabelled n ui = UI.horizontal [(False, UI.label n),(True, ui)];

in export
    stdWindow
    selectionWindow
    selectionPairWindow
    uiPage
    uiLabelled
