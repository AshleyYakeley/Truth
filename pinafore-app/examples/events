#!/usr/bin/pinafore

let

import UIStuff.Selection;
import UIStuff.Named;

### EventTime

# An event can either be at a particular time, or a whole-day event.
closedtype EventTime
    = EventTimeDate Date !"Date" # all-day event
    | EventTimeTime LocalTime !"Time"; # event at a time

showEventTime: EventTime -> Text;
showEventTime et = case et of
    EventTimeDate d -> unixFormatDate "%F" d;
    EventTimeTime t -> unixFormatLocalTime "%F %R" t;
    end;

eventTimeDate: EventTime -> Date;
eventTimeDate et = case et of
    EventTimeDate d -> d;
    EventTimeTime (DateAndTime d _) -> d
    end;

setEventTimeDate: Date -> Maybe EventTime -> Maybe EventTime;
setEventTimeDate d et = Just $ case et of
    Just (EventTimeTime (DateAndTime _ t)) -> EventTimeTime (DateAndTime d t);
    _ -> EventTimeDate d;
    end;

eventRefTimeDate: WholeRef EventTime -> WholeRef Date;
eventRefTimeDate r = lensMapWhole eventTimeDate setEventTimeDate r;

eventRefTimeTimeOfDay: WholeRef EventTime -> WholeRef TimeOfDay;
eventRefTimeTimeOfDay r = let
    eventTimeTimeOfDay: Maybe EventTime -> Maybe TimeOfDay;
    eventTimeTimeOfDay met = case met of
        Just (EventTimeTime (DateAndTime _ tod)) -> Just tod;
        _ -> Nothing;
        end;

setEventTimeTimeOfDay: Maybe TimeOfDay -> Maybe EventTime -> Maybe (Maybe EventTime);
setEventTimeTimeOfDay mtod met = Just $ case met of
    Nothing -> Nothing;
    Just et -> Just $ case mtod of
        Nothing -> EventTimeDate $ eventTimeDate et;
        Just tod -> EventTimeTime $ DateAndTime (eventTimeDate et) tod;
        end;
    end;
in maybeLensMapWhole eventTimeTimeOfDay setEventTimeTimeOfDay r;

# for ordering
eventTimeTime: EventTime -> LocalTime;
eventTimeTime et = case et of
    EventTimeDate d -> DateAndTime d midnight;
    EventTimeTime t -> t
    end;

eventTimeOrder: RefOrder EventTime;
eventTimeOrder = mapOrder eventTimeTime localChronological;


### Event

opentype Event;
subtype Event <: Named;
events: FiniteSetRef Event;
events = property @Event @() !"type.event" !@ {()};

eventTime = property @Event @EventTime !"event.time";
eventNotes = property @Event @Text !"item.description";

eventOrder: RefOrder Event;
eventOrder = orderOn eventTime eventTimeOrder;

eventData: FiniteSetRef (EventTime,Text);
eventData = (eventTime !** name) !$$ events;

eventDataOrder: RefOrder (EventTime,Text);
eventDataOrder = mapOrder fst eventTimeOrder;

eventList: WholeRef +Date -> WholeRef +[(EventTime,Text)];
eventList todayref = {
    let
        today: Date;
        today = %todayref;

        pickCurrent: (EventTime,Text) -> Boolean;
        pickCurrent (t,_) = ge $ calendrical (eventTimeDate t) today;
    in (EventTimeDate today,"Today") :: filter pickCurrent %(setList eventDataOrder eventData)
    };


### UI

# Text for the overview tab.
overviewRef: WholeRef +Date -> WholeRef +Text;
overviewRef todayref = {textConcat $ mapList (\(t,n) -> showEventTime t <> ": " <> n <> "\n") %(eventList todayref)};

# Overview tab UI
overviewPane: Pane;
overviewPane = pane "Overview" $ UI.run $ do
    now <- newClock $ Seconds 60; # update every minute
    tz <- newTimeZoneRef now;
    return $ UI.label $ overviewRef {case timeToLocal %tz %now of DateAndTime d _ -> d end};
    end;

calendarWindow: WholeRef +Event -> Action UI.Window;
calendarWindow evt = fixAction $ \window ->
    UI.openWindow (200,200) {"date of " <> %(name !$% evt)} {[]} $ UI.vertical
    [
        (False,UI.calendar $ eventRefTimeDate $ eventTime !$% evt),
        (False,UI.button {"Done: " <> show %(eventRefTimeDate $ eventTime !$% evt)} {UI.closeWindow window})
    ];

eventUI: WholeRef +Event -> UI.Element;
eventUI evt = UI.vertical
[
    (False, UI.textEntry $ name !$% evt),
    (False, UI.horizontal
    [
        (False, UI.button {"cal"} {calendarWindow evt}),
        (False, UI.textEntry $ interpretDateAsText $ eventRefTimeDate $ eventTime !$% evt),
        (False, UI.textEntry $ unixInterpretTimeOfDayAsText "%H:%M" $ eventRefTimeTimeOfDay $ eventTime !$% evt)
    ]),
    (True, UI.textArea $ eventNotes !$% evt)
];

eventWindow: Event -> Action UI.Window;
eventWindow evt = paneWindow $ namedPane eventUI {evt};

newEvent: Action Event;
newEvent = do
    item <- newOpenEntity @Event;
    day <- getDate;
    eventTime !$ {item} := EventTimeDate day;
    name !$ {item} := "";
    return item;
    end;

eventsTableUI: WholeRef Event -> UI.Element;
eventsTableUI selection = let
    columns: [(WholeRef +Text, Event -> WholeRef Text)];
    columns = let
        timeColumn: (WholeRef +Text, Event -> WholeRef Text);
        timeColumn = ({"When"},\e -> {showEventTime $ %(eventTime !$ {e})});
        nameColumn: (WholeRef +Text, Event -> WholeRef Text);
        nameColumn = ({"What"},\e -> name !$ {e});
        in [timeColumn,nameColumn];
    in UI.run $ do
        lref <- getSetList eventOrder events;
        return $ UI.listTable columns lref eventWindow (Just selection);
        end;

in do
    eventsPane <- selectionPairPane "Events" events [newItemMenuAction ("New Event") (Just "Ctrl+K") newEvent events] eventWindow eventsTableUI eventUI;
    pane <- notebookPane {"Events"} [overviewPane,eventsPane];
    paneWindow pane
    end
