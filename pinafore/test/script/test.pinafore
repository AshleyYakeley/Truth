# Run "pinafore --doc" to see all predefined bindings.

let

### Useful
ui_page n ui = (uiLabel n,ui);
ui_labelled n ui = uiHorizontal [(uiLabel n,False),(ui,True)];

std_window :: Ref +Text -> UI a -> Action Window;
std_window title contents = fixAction $ \window -> let
    menus :: [MenuItem];
    menus =
        [
            menuSubmenu "File"
            [
                menuAction "Close" (Just "Ctrl+W") {closeWindow window},
                menuSeparator,
                menuAction "Exit" (Just "Ctrl+Q") {exitUI}
            ],
            menuSubmenu "Edit"
            [
                menuAction "Undo" (Just "Ctrl+Z") {queueUndo},
                menuAction "Redo" (Just "Ctrl+Y") {queueRedo}
            ]
        ]
    in openWindow title (\_ -> {menus}) $ uiScrolled contents;

### People

# Ontology

opentype Type;
opentype Person;

type = property @Person @Type !"f06efa5e-190f-4e5d-8633-495c5683c124";
name = property @Person @Text !"498260df-6a8a-44f0-b285-68a63565a33b";

people = type !@ {entity @Type !"78baed51-cb05-46b5-bcb4-49031532b890"};

mother = property @Person @Person !"3afce58f-b7eb-4b11-8a75-2d66afd4d085";
father = property @Person @Person !"c005705f-9259-4d24-9713-db28a6e4f7d5";
# parents :: Ref Person -> FiniteSetRef Person;
# parents p = (mother !$ p) <|> (father !$ p);
children :: Ref Person -> FiniteSetRef Person;
children p = mother !@ p <:|:> father !@ p;

employer = property @Person @Person !"72f612af-ae47-4c18-b3df-6932ae914f62";

email = property @Person @Text !"8649b74c-123e-4ece-be3b-b734b0db3ea7";

phone = property @Person @Text !"83dfc88b-7b5b-4262-a548-0af84d5e3b63";

opentype Location;
home = property @Person @Location !"b4f7736e-2db4-486c-aae5-b6a9b1035fd0";
address = property @Location @Text !"fd83bef7-145c-4e40-a2d6-938bb5fb6da1";
locphone = property @Location @Text !"0689535c-f220-47a2-8fcb-4782574e0749";
city = property @Location @Text !"55c84133-64f2-47a6-8b3c-e01256ec9779";
postcode = property @Location @Text !"80f99100-407b-4a6b-a4f0-a025c94132b3";
province = property @Location @Text !"dffae424-28d5-4543-b1b2-b8a744bbc0cd";
country = property @Location @Text !"1257c340-0ec1-4ff7-9fd8-d2eaa7822463";

birthdate = property @Person @Text !"b711b9b3-b43c-4ff6-be12-3291cc6b050a";
deathdate = property @Person @Text !"805a9e65-d69a-4261-9c94-a3249885b6bb";
married = property @Person @Boolean !"380ac576-9252-4783-b2d8-db222c683a22";

# UI
ui_people :: FiniteSetRef Person -> UI Person;
ui_people pp = uiWithSelection $ \getperson -> uiVertical
[
    (uiButton {"New Person"} {newEntity pp >>= window_person},False),
    (uiButton {"View Person"} {getperson >>= window_person},False),
    (uiButton {"Remove Person"} {getperson >>= \p -> pp -= p},False),
    (uiTable [({"Name"},\p -> name !$ {p})] noOrder pp $ window_person,True)
];

ui_person :: Ref Person -> UI None;
ui_person p = uiIgnore $uiVertical
[
    (ui_labelled {"Name: "} $ uiTextEntry $ name !$ p,False),
    (uiPages
    [
        ui_page {"Social"} $ uiVertical
        [
            (ui_labelled {"Email: "} $ uiTextEntry $ email !$ p,False),
            (ui_labelled {"Phone: "} $ uiTextEntry $ phone !$ p,False)
        ],
        ui_page {"Home"} $ let homep = home !$ p in uiVertical
        [
            (ui_labelled {"Address: "} $ uiTextArea $ address !$ homep,False),
            (ui_labelled {"City: "} $ uiTextEntry $ city !$ homep,False),
            (ui_labelled {"Postcode/ZIP: "} $ uiTextEntry $ postcode !$ homep,False),
            (ui_labelled {"State/Province: "} $ uiTextEntry $ province !$ homep,False),
            (ui_labelled {"Country: "} $ uiTextEntry $ country !$ homep,False),
            (ui_labelled {"Phone: "} $ uiTextEntry $ locphone !$ homep,False)
        ],
        ui_page {"Work"} $ uiVertical
        [
            (ui_labelled {"Employer: "} $ uiTextEntry $ (name !. employer) !$ p,False)
        ],
        ui_page {"Family"} $ uiVertical
        [
            (ui_labelled {"Birth: "} $ uiTextEntry $ birthdate !$ p,False),
            (ui_labelled {"Death: "} $ uiTextEntry $ deathdate !$ p,False),
            (uiCheckBox {"Married"} $ married !$ p,False),
            (ui_labelled {"Mother: "} $ uiPick name people $ mother !$ p,False),
            (ui_labelled {"Father: "} $ uiPick name people $ father !$ p,False),
            (ui_people $ children p,True)
        ]
    ],True)
];

window_person :: Person -> Action Window;
window_person p = std_window (name !$ {p}) (ui_person {p});

window_people :: Action Window;
window_people = std_window {"People"} (ui_people people);

### Calculator

window_calc :: Action Window;
window_calc = let
opentype P;
pvalue = property @P @Number !"pvalue";
aval = pvalue !$ {entity @P !"a4706230-2c61-44b1-b600-516e7a54c607"};
bval = pvalue !$ {entity @P !"9d284ad2-e141-4114-ae50-8829a6db710f"};
in std_window {"Calc"} $ uiVertical
[
    #(uiTextEntry aval,False),
    #(uiTextEntry bval,False),
    #(uiLabel $ aval / bval,False)
];

### Switching Value

window_switch :: Action Window;
window_switch = let
opentype P;
pbool = property @P @Boolean !"pbool";
ptext = property @P @Text !"ptext";
sw_pick = pbool !$ {entity @P !"59eb2d87-f815-47ef-b7dc-8fe434151bb6"};
sw_val1 = ptext !$ {entity @P !"6d9f7afa-1091-49cc-8646-8e613bb75ee5"};
sw_val2 = ptext !$ {entity @P !"934712ae-73a7-4084-8a43-d618c737fd56"};
in std_window {"Switch"} $ uiVertical
[
    #(uiTextEntry sw_pick,False),
    (uiCheckBox {"pick"} sw_pick,False),
    (uiDynamic {if %sw_pick then uiTextArea sw_val1 else uiTextArea sw_val2},True)
];

### Imported Files

window_files :: Action Window;
window_files = let
#Files = @type !f649e7d7-7e98-4c86-919c-34f52ac12c7a;
#caption = %4a8ca041-a67d-4a1e-b212-9243fca635b0;
window_file f = std_window {"File"} $ uiVertical
[
    #(uiTextEntry $ caption f,False)
];
in std_window {"Files"} $ uiVertical
[
    #(uiButton "Import" {file_import Files $ \f -> std_window $ window_file f},False),
    #(uiTable [column "Caption" caption, column "Size" file_size] window_file Files,True)
];

### Constant Edit

window_constant :: Action Window;
window_constant = std_window {"Constant"} $ uiVertical
[
    (uiCheckBox {"off"} {False},False),
    (uiCheckBox {"on"} {True},False),
    (uiTextEntry {"constant"},False),
    (uiTextArea {"constant"},True)
];

### Start Window

window_start :: Action Window;
window_start = std_window {"Pinafore"} $ uiVertical
[
    (uiLabel {"UTC time: " <> toText %now},False),
    (uiLabel {"UTC day: " <> toText %utcDay},False),
    (uiLabel {"Local time: " <> toText %localNow},False),
    (uiLabel {"Local day: " <> toText %today},False),
    (uiLabel {"Time zone offset minutes: " <> toText %timeZone},False),
    (uiButton {"People"} {window_people},False),
    (uiButton {"Calculated Form"} {window_calc},False),
    (uiButton {"Switch"} {window_switch},False),
    (uiButton {"Files"} {window_files},False),
    (uiButton {"Constant"} {window_constant},False),
    (uiButton {"Disabled"} unknown,False),
    (uiBlank,True)
];

in do
    window_start;
    return ();
    end
