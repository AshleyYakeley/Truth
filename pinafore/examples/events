#!/usr/bin/pinafore

let

# Create a window with some standard menus
# arguments are title reference, more menus, content UI
stdWindow: Ref +Text -> [MenuItem] -> UI -> Action Window;
stdWindow title moremenus content = fixAction $ \window -> let
    menus: [MenuItem];
    menus =
        [
            menuSubmenu "File"
            [
                menuAction "Close" (Just "Ctrl+W") {closeWindow window},
                menuSeparator,
                menuAction "Exit" (Just "Ctrl+Q") {exitUI}
            ],
            menuSubmenu "Edit"
            [
                menuAction "Undo" (Just "Ctrl+Z") {queueUndo},
                menuAction "Redo" (Just "Ctrl+Y") {queueRedo}
            ]
        ] ++ moremenus;
    in openWindow title {menus} $ uiScrolled content;

selectionWindow:
    (Text, Text) ->
    SetRef (item | NewEntity) ->
    ((item | NewEntity) -> Action Any) ->
    ((item | NewEntity) -> Action Any) ->
    (Ref {item,+NewEntity} -> UI) ->
    Action Window;
selectionWindow (inames,inamep) iset iopen inew iui = do
    selection <- newMemRef;
    let
        newItem: Action ();
        newItem = do
            item <- newEntity iset;
            inew item;
            iopen item;
            selection := item;
            end;

        viewItem: Action ();
        viewItem = do
            item <- get selection;
            iopen item;
            return ();
            end;

        deleteItem: Action ();
        deleteItem = do
            item <- get selection;
            iset -= item;
            end;

        moremenus: [MenuItem];
        moremenus =
            [
                menuSubmenu "Selection"
                [
                    menuAction ("New " <> inames) (Just "Ctrl+K") {newItem},
                    menuAction "View" Nothing {viewItem},
                    menuAction "Delete" Nothing {deleteItem}
                ]
            ];
        in stdWindow {inamep} moremenus (iui selection);
    end;


### EventTime

closedtype EventTime
    = EventTimeDate Date !"Date" # all-day event
    | EventTimeTime LocalTime !"Time"; # event at a time

showEventTime: EventTime -> Text;
showEventTime et = case et of
    EventTimeDate d -> toText d;
    EventTimeTime t -> toText t;
    end;

eventTimeDate: EventTime -> Date;
eventTimeDate et = case et of
    EventTimeDate d -> d;
    EventTimeTime (LocalTime d _) -> d
    end;

setEventTimeDate: Date -> Maybe EventTime -> Maybe EventTime;
setEventTimeDate d et = Just $ case et of
    Just (EventTimeTime (LocalTime _ t)) -> EventTimeTime (LocalTime d t);
    _ -> EventTimeDate d;
    end;

eventRefTimeDate: Ref EventTime -> Ref Date;
eventRefTimeDate r = lensMapRef eventTimeDate setEventTimeDate r;

eventRefTimeTimeOfDay: Ref EventTime -> Ref TimeOfDay;
eventRefTimeTimeOfDay r = let
    eventTimeTimeOfDay: Maybe EventTime -> Maybe TimeOfDay;
    eventTimeTimeOfDay met = case met of
        Just (EventTimeTime (LocalTime _ tod)) -> Just tod;
        _ -> Nothing;
        end;

    setEventTimeTimeOfDay: Maybe TimeOfDay -> Maybe EventTime -> Maybe (Maybe EventTime);
    setEventTimeTimeOfDay mtod met = Just $ case met of
        Nothing -> Nothing;
        Just et -> Just $ case mtod of
            Nothing -> EventTimeDate $ eventTimeDate et;
            Just tod -> EventTimeTime $ LocalTime (eventTimeDate et) tod;
            end;
        end;
    in maybeLensMapRef eventTimeTimeOfDay setEventTimeTimeOfDay r;

# for ordering
eventTimeTime: EventTime -> LocalTime;
eventTimeTime et = case et of
    EventTimeDate d -> LocalTime d midnight;
    EventTimeTime t -> t
    end;

eventTimeOrder: Order EventTime;
eventTimeOrder = mapOrder eventTimeTime localChronological;


### Event

opentype Event;
events: FiniteSetRef Event;
events = property @Event @() !"type.event" !@ {()};

eventName = property @Event @Text !"identify.name";
eventTime = property @Event @EventTime !"event.time";
eventNotes = property @Event @Text !"item.description";

eventOrder: Order Event;
eventOrder = orderOn eventTime eventTimeOrder;

eventData: FiniteSetRef (EventTime,Text);
eventData = (eventTime !** eventName) !$$ events;

eventDataOrder: Order (EventTime,Text);
eventDataOrder = mapOrder fst eventTimeOrder;

eventList: Ref +[(EventTime,Text)];
eventList = members eventDataOrder eventData;


### UI

overviewRef: Ref +Text;
overviewRef = {textConcat $ mapList (\(t,n) -> showEventTime t <> ": " <> n <> "\n") %eventList};

overviewPage: (UI,UI);
overviewPage = (uiLabel {"Overview"},uiLabel overviewRef);

tablePage: Ref Event -> (UI,UI);
tablePage selection = let
    columns: [(Ref +Text, Event -> Ref Text)];
    columns = let
        timeColumn: (Ref +Text, Event -> Ref Text);
        timeColumn = ({"Time"},\e -> {showEventTime $ %(eventTime !$ {e})});
        nameColumn: (Ref +Text, Event -> Ref Text);
        nameColumn = ({"Name"},\e -> eventName !$ {e});
        in [timeColumn,nameColumn];
    in (uiLabel {"Events"}, uiTable columns eventOrder events eventWindow (Just selection));

calendarWindow: Event -> Action Window;
calendarWindow evt = fixAction $ \window ->
    openWindow {"date of " <> %(eventName !$ {evt})} {[]} $ uiVertical
    [
        (False,uiCalendar $ eventRefTimeDate $ eventTime !$ {evt}),
        (False,uiButton {"Done: " <> toText %(eventRefTimeDate $ eventTime !$ {evt})} {closeWindow window})
    ];

eventWindow: Event -> Action Window;
eventWindow evt = stdWindow (eventName !$ {evt}) [] $ uiVertical
[
    (False, uiTextEntry $ eventName !$ {evt}),
    (False, uiHorizontal
    [
        (False, uiButton {"cal"} {calendarWindow evt}),
        (False, uiTextEntry $ interpretDateAsText $ eventRefTimeDate $ eventTime !$ {evt}),
        (False, uiTextEntry $ interpretTimeOfDayAsText $ eventRefTimeTimeOfDay $ eventTime !$ {evt})
    ]),
    (True, uiTextArea $ eventNotes !$ {evt})
];

eventsWindow: Action Window;
eventsWindow = let
    inew i = do
        day <- getDate;
        eventTime !$ {i} := EventTimeDate day;
        eventName !$ {i} := "";
        end;
    iui selection = uiPages [overviewPage, tablePage selection];
    in selectionWindow ("Event","Events") events eventWindow inew iui;

in eventsWindow
