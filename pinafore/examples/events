#!/usr/bin/pinafore

let

import UIStuff;

### EventTime

# An event can either be at a particular time, or a whole-day event.
closedtype EventTime
    = EventTimeDate Date !"Date" # all-day event
    | EventTimeTime LocalTime !"Time"; # event at a time

showEventTime: EventTime -> Text;
showEventTime et = case et of
    EventTimeDate d -> unixFormatDate "%F" d;
    EventTimeTime t -> unixFormatLocalTime "%F %R" t;
    end;

eventTimeDate: EventTime -> Date;
eventTimeDate et = case et of
    EventTimeDate d -> d;
    EventTimeTime (LocalTime d _) -> d
    end;

setEventTimeDate: Date -> Maybe EventTime -> Maybe EventTime;
setEventTimeDate d et = Just $ case et of
    Just (EventTimeTime (LocalTime _ t)) -> EventTimeTime (LocalTime d t);
    _ -> EventTimeDate d;
    end;

eventRefTimeDate: WholeRef EventTime -> WholeRef Date;
eventRefTimeDate r = lensMapWhole eventTimeDate setEventTimeDate r;

eventRefTimeTimeOfDay: WholeRef EventTime -> WholeRef TimeOfDay;
eventRefTimeTimeOfDay r = let
    eventTimeTimeOfDay: Maybe EventTime -> Maybe TimeOfDay;
    eventTimeTimeOfDay met = case met of
        Just (EventTimeTime (LocalTime _ tod)) -> Just tod;
        _ -> Nothing;
        end;

setEventTimeTimeOfDay: Maybe TimeOfDay -> Maybe EventTime -> Maybe (Maybe EventTime);
setEventTimeTimeOfDay mtod met = Just $ case met of
    Nothing -> Nothing;
    Just et -> Just $ case mtod of
        Nothing -> EventTimeDate $ eventTimeDate et;
        Just tod -> EventTimeTime $ LocalTime (eventTimeDate et) tod;
        end;
    end;
in maybeLensMapWhole eventTimeTimeOfDay setEventTimeTimeOfDay r;

# for ordering
eventTimeTime: EventTime -> LocalTime;
eventTimeTime et = case et of
    EventTimeDate d -> LocalTime d midnight;
    EventTimeTime t -> t
    end;

eventTimeOrder: RefOrder EventTime;
eventTimeOrder = mapRefOrder eventTimeTime localChronological;


### Event

opentype Event;
events: FiniteSetRef Event;
events = property @Event @() !"type.event" !@ {()};

eventName = property @Event @Text !"identify.name";
eventTime = property @Event @EventTime !"event.time";
eventNotes = property @Event @Text !"item.description";

eventOrder: RefOrder Event;
eventOrder = refOrderOn eventTime eventTimeOrder;

eventData: FiniteSetRef (EventTime,Text);
eventData = (eventTime !** eventName) !$$ events;

eventDataOrder: RefOrder (EventTime,Text);
eventDataOrder = mapRefOrder fst eventTimeOrder;

eventList: WholeRef +Date -> WholeRef +[(EventTime,Text)];
eventList todayref = {
    let
        today: Date;
        today = %todayref;

        pickCurrent: (EventTime,Text) -> Boolean;
        pickCurrent (t,_) = ge $ calendrical (eventTimeDate t) today;
    in (EventTimeDate today,"Today") :: filter pickCurrent %(members eventDataOrder eventData)
    };


### UI

# Text for the overview tab.
overviewRef: WholeRef +Date -> WholeRef +Text;
overviewRef todayref = {textConcat $ mapList (\(t,n) -> showEventTime t <> ": " <> n <> "\n") %(eventList todayref)};

# Overview tab UI
overviewLabel: UI;
overviewLabel = uiRun $ do
    now <- newClock $ secondsToDuration 60; # update every minute
    tz <- newTimeZoneRef now;
    return $ uiLabel $ overviewRef {case timeToLocal %tz %now of LocalTime d _ -> d end};
    end;

overviewPage: ((UI,UI),());
overviewPage = ((uiLabel {"Overview"}, overviewLabel),());

calendarWindow: WholeRef +Event -> Action Window;
calendarWindow evt = fixAction $ \window ->
    openWindow (200,200) {"date of " <> %(eventName !$% evt)} {[]} $ uiVertical
    [
        (False,uiCalendar $ eventRefTimeDate $ eventTime !$% evt),
        (False,uiButton {"Done: " <> toText %(eventRefTimeDate $ eventTime !$% evt)} {closeWindow window})
    ];

eventUI: WholeRef +Event -> UI;
eventUI evt = uiVertical
[
    (False, uiTextEntry $ eventName !$% evt),
    (False, uiHorizontal
    [
        (False, uiButton {"cal"} {calendarWindow evt}),
        (False, uiTextEntry $ interpretDateAsText $ eventRefTimeDate $ eventTime !$% evt),
        (False, uiTextEntry $ unixInterpretTimeOfDayAsText "%H:%M" $ eventRefTimeTimeOfDay $ eventTime !$% evt)
    ]),
    (True, uiTextArea $ eventNotes !$% evt)
];

eventWindow: Event -> Action Window;
eventWindow evt = stdWindow (eventName !$ {evt}) [] $ eventUI {evt};

# Menu item for creating a new event, and telling the owning UI to set its selection to it.
newEventMenuItem: (Event -> Action ()) -> MenuItem;
newEventMenuItem setsel = menuAction ("New Event") (Just "Ctrl+K")
    {do
    item <- newOpenEntity @Event;
    day <- getDate;
    eventTime !$ {item} := EventTimeDate day;
    eventName !$ {item} := "";
    events += item;
    setsel item;
    end};

eventsWindow: Action Window;
eventsWindow = selectionWindow "Events" events [newEventMenuItem] eventWindow $ \selection -> let
    eventsTableUI: UI;
    eventsTableUI = let
        columns: [(WholeRef +Text, Event -> WholeRef Text)];
        columns = let
            timeColumn: (WholeRef +Text, Event -> WholeRef Text);
            timeColumn = ({"When"},\e -> {showEventTime $ %(eventTime !$ {e})});
            nameColumn: (WholeRef +Text, Event -> WholeRef Text);
            nameColumn = ({"What"},\e -> eventName !$ {e});
            in [timeColumn,nameColumn];
        in uiListTable columns eventOrder events eventWindow (Just selection);

    eventsPage: ((UI,UI),());
    eventsPage = ((uiLabel {"Events"},uiScrolled $ uiHorizontal [(False,eventsTableUI),(True,eventUI $ immutWhole selection)]),());

    in uiNotebook unknown [overviewPage, eventsPage];

in eventsWindow
