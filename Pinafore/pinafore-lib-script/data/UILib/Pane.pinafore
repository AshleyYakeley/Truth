import "gnome", "UILib/Command"
with GTK.
namespace UILib {
  docsec "Useful GTK stuff" {
    namespace Widget {
      #| Create a labelled page for use with `notebook.Widget.GTK`.
      page: WholeModel +Text -> Widget -> Widget *: Widget =
        fn n, ui =>
        (label.Widget n,ui);

      #| Create a labelled layout row.
      labelled: WholeModel +Text -> Widget -> Widget =
        fn n, ui =>
        horizontal.Widget [label.Widget n, grow.Layout.Widget ui];
    };
  };

  docsec "Panes" {
    #| A pane is a title, GTK widget, and menu.
    datatype Pane {
      Mk {
        titleModel: WholeModel Text;
        extraMenusModel: Context.Command -> WholeModel (List MenuEntry) = fn _ => ap{[]};
        contents: Widget;
      };
    };

  namespace Pane {
    #| A pane with this title and widget
    simple: Text -> Widget -> Pane =
      fn title, e => Mk.Pane {
        titleModel = ap{title};
        contents = e;
      };

    #| Create a notebook from a list of panes
    notebook: WholeModel +Text -> List Pane -> Action Pane =
      fn title, panes => do {
        tabModel <- newMem.WholeModel;
        pure $
        let {
          makePage: Pane -> Widget *: Widget =
              fn Mk.Pane => page.Widget titleModel contents;

          with WholeModel.;
        } Mk.Pane {
          titleModel = immut title;
          extraMenusModel = fn context =>
              fromMaybe ap{index.List %(for panes $ fn Mk.Pane => extraMenusModel context) %tabModel};
          contents = notebook.Widget tabModel $ map.List makePage panes;
        };
      };

    paneWindow: Pane -> Action Window =
      fn Mk.Pane =>
      mfix.Action $
      fn window => do {
        textsel <- newMem.WholeModel;
        let {
          notify: Action TextModel -> Action Unit =
            fn atmodel =>
            textsel :=.WholeModel atmodel;

          getTextSelection: Action (WholeModel Text) =
            do {
              atmodel <- get.WholeModel textsel;
              atmodel;
            };

          context =
            Mk.Context.Command {
              gtk = ?gtk;
              undoHandler = ?undoHandler;
              window = window;
              getTextSelection = getTextSelection;
            };

          mbar: Widget =
            dynamic.Widget ap{
              menuBar.Widget $
              with MenuEntry.GTK., Command.UILib. [
                submenu "File" [
                  toMenuEntry context close,
                  separator,
                  toMenuEntry context exit
                ],
                submenu "Edit" [
                  toMenuEntry context undo,
                  toMenuEntry context redo,
                  separator,
                  toMenuEntry context cut,
                  toMenuEntry context copy,
                  toMenuEntry context paste
                ]
              ] <>.List %(extraMenusModel context)
            };
        }
        open.Window ?gtk (600,800) titleModel $
        vertical.Widget [
          mbar,
          grow.Layout.Widget $ scrolled.Widget $ notifySelection.Widget notify contents
        ];
      };
    };
  };
};
