import "gnome", "UILib/Command", "UILib/Pane"
with GTK.
namespace UILib {
  docsec "Sets" {
    #| A widget for a set, for a model of the current selection
    datatype SetWidget item {
      Mk (Maybe (WholeModel item) -> Widget);
    };

    namespace SetWidget {
      toWidget: SetWidget () -> Widget =
      fn Mk se => se Nothing;
    };

    datatype SetContext item {
      Mk {
        itemPane: item -> Pane;
        getSelection: Action item;
        addItem: item -> Action Unit;
        itemSet: SetModel item;
      };
    };

    viewCommand: Command (Context.Command *: SetContext item) =
      Mk.Command {
        name = "View";
        action =
          fn (_,Mk.SetContext) =>
          do {
              item <- getSelection;
              paneWindow.Pane $ itemPane item;
              pure ();
          };
      };

    deleteCommand: Command (Context.Command *: SetContext item) =
        Mk.Command {
          name = "Delete";
          action =
            fn (_,Mk.SetContext) =>
            do {
              item <- getSelection;
              itemSet -=.SetModel item;
            };
        };

    #| A way of presenting some set of items as a `Pane`.
    datatype SetPresentation item {
      Mk {
        #| name for a collection of the items
        setName: Text;

        #| the set of items
        itemSet: SetModel item;

        #| menu items for creating new items
        menuEntries: List (Command (Context.Command *: SetContext item))
            = [];

        #| extra menus
        extraMenus: List MenuEntry
            = [];

        #| a `Pane` for a individual item
        itemPane: item -> Pane;

        #| a `SetWidget` for the set as a whole.
        setWidget: SetWidget item;
      };
    };

    namespace SetPresentation {

      presentWithWidget: SetPresentation item -> SetWidget item -> Action Pane =
        fn Mk.SetPresentation, Mk.SetWidget se => do {
          selectionModel <- newMem.WholeModel;
          pure $
          Mk.Pane {
            titleModel = ap{setName};
            contents = se $ Just selectionModel;
            extraMenusModel = fn context =>
              let {
                setContext =
                  Mk.SetContext {
                    itemPane = itemPane;
                    getSelection = get.WholeModel selectionModel;
                    addItem = fn item => do {
                        itemSet +=.SetModel item;
                        selectionModel :=.WholeModel item;
                      };
                    itemSet = itemSet;
                  };

                allExtraMenus: List MenuEntry =
                with MenuEntry.GTK. [
                  submenu "Selection" $
                  map.List (toMenuEntry.Command (context,setContext)) $
                  menuEntries <>.List [
                      viewCommand,
                      deleteCommand
                  ]
                ] <> extraMenus;
              } ap{allExtraMenus};
          };
        };

      present: SetPresentation item -> Action Pane =
        fn tp@Mk.SetPresentation =>
        presentWithWidget tp setWidget;

      presentWithItem: SetPresentation item -> Action Pane =
        fn tp@Mk.SetPresentation =>
        presentWithWidget tp $
        Mk.SetWidget $
        fn mSelectionModel =>
        let {
          sidebarUI: Widget =
            setWidget >- fn Mk.SetWidget se =>
            se mSelectionModel;

          selectedUI: Widget =
            mSelectionModel >- fn {
              Nothing => blank.Widget;
              Just selectionModel => dynamic.Widget ap{itemPane %selectionModel >- fn Mk.Pane => contents};
            };
        } horizontal.Widget [sidebarUI, grow.Layout.Widget selectedUI];
    };
  };
};
