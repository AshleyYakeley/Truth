import "gnome"
with GTK.
namespace UILib {
  docsec "Commands" {
    datatype Command -context {
      Mk {
        name: Text;
        defaultKeyBinding: Maybe Text = Nothing;
        action: context -> Action Unit;
      };
    };

    namespace Command {
      toMenuEntry: context -> Command context -> MenuEntry =
        fn ctxt, Mk => action.MenuEntry ap{(name, defaultKeyBinding)} ap{action ctxt};

      datatype Context {
        Mk {
          gtk: Context.GTK.;
          undoHandler: UndoHandler;
          window: Window;
          getTextSelection: Action (WholeModel Text);
        };
      };

      copy: Command Context =
        Mk.Command {
          name = "Copy";
          defaultKeyBinding = Just "Ctrl+C";
          action =
            fn Mk.Context => do {
              tmodel <- getTextSelection;
              text <- get.WholeModel tmodel;
              clipboard ?gtk :=.WholeModel text;
            };
        };

      cut: Command Context =
        Mk.Command {
          name = "Cut";
          defaultKeyBinding = Just "Ctrl+X";
          action =
            fn Mk.Context => do {
              tmodel <- getTextSelection;
              text <- get.WholeModel tmodel;
              clipboard ?gtk :=.WholeModel text;
              tmodel :=.WholeModel "";
            };
        };

      paste: Command Context =
          Mk.Command {
            name = "Paste";
            defaultKeyBinding = Just "Ctrl+V";
            action =
              fn Mk.Context => do {
                tmodel <- getTextSelection;
                clip <- get.WholeModel $ clipboard ?gtk;
                clip >-
                fn {
                  text:? Text => tmodel :=.WholeModel text;
                  _ => pure ();
                };
              };
          };

      undo: Command Context =
        Mk.Command {
          name = "Undo";
          defaultKeyBinding = Just "Ctrl+Z";
          action = fn Mk.Context => queueUndo undoHandler >> pure ();
        };

      redo: Command Context =
        Mk.Command {
          name = "Redo";
          defaultKeyBinding = Just "Ctrl+Y";
          action = fn Mk.Context => queueRedo undoHandler >> pure ();
        };

      close: Command Context =
        Mk.Command {
          name = "Close";
          defaultKeyBinding = Just "Ctrl+W";
          action = fn Mk.Context => close.Window window;
        };

      exit: Command Context =
        Mk.Command {
          name = "Exit";
          defaultKeyBinding = Just "Ctrl+Q";
          action = fn Mk.Context => exit.GTK gtk;
        };
    };
  };
};
