let

import GTK;

### Useful GTK stuff

uiPage: WholeRef +Text -> Element -> Element *: Element
= fns n ui => (label n,ui);

uiLabelled: WholeRef +Text -> Element -> Element
= fns n ui => horizontal [label n, layoutGrow ui];

#| A window that comes with some menus.
stdWindow: Context -> WholeRef +Text -> WholeRef +(List MenuItem) -> Element -> Action Window
= fns gtk title moremenus contents => fixAction $ fn window => do
    textsel <- newMemWhole;
    let
        notify: Action TextRef -> Action Unit
        = fn atref => textsel := atref;
        getTextRef: Action (WholeRef Text)
        = do
            atref <- get textsel;
            atref;
        end;
        selCopy: Action Unit
        = do
            tref <- getTextRef;
            text <- get tref;
            clipboard gtk := text;
        end;
        selCut: Action Unit
        = do
            tref <- getTextRef;
            text <- get tref;
            clipboard gtk := text;
            tref := "";
        end;
        selPaste: Action Unit
        = do
            tref <- getTextRef;
            clip <- get $ clipboard gtk;
            case clip of
                text: Text => tref := text;
                _ => return ();
            end;
        end;
        mbar: Element
        = dynamic
            {menuBar $ [
                menuSubmenu "File"
                [
                    menuAction "Close" (Just "Ctrl+W") {closeWindow window},
                    menuSeparator,
                    menuAction "Exit" (Just "Ctrl+Q") {exit gtk}
                ],
                menuSubmenu "Edit"
                [
                    menuAction "Undo" (Just "Ctrl+Z") {queueUndo},
                    menuAction "Redo" (Just "Ctrl+Y") {queueRedo},
                    menuSeparator,
                    menuAction "Cut" (Just "Ctrl+X") {selCut},
                    menuAction "Copy" (Just "Ctrl+C") {selCopy},
                    menuAction "Paste" (Just "Ctrl+V") {selPaste}
                ]
            ] ++ %moremenus};
        in openWindow gtk (600,800) title $ vertical [mbar, layoutGrow $ scrolled $ notifySelection notify contents];
    end;

#| A pane is a title, GTK element, and menu.
datatype Pane of
    MkPane (WholeRef Text) Element (WholeRef (List MenuItem))
end;

paneWindow: Context -> Pane -> Action Window
= fns gtk (MkPane title ui moremenus) => stdWindow gtk title moremenus ui;

pane: Text -> Element -> Pane
= fns title ui => MkPane {title} ui {[]};

#| A notebook from a list of panes
notebookPane: WholeRef +Text -> List Pane -> Action Pane
= fns title panes => do
    tabRef <- newMemWhole;
    return $ let
        makePage: Pane -> Element *: Element
        = fn MkPane rname ui _ => uiPage rname ui;
        nui: Element
        = notebook tabRef $ mapList makePage panes;
        itemsRef = forWhole panes $ fn MkPane _ _ rmenus => rmenus;
        in MkPane (immutWhole title) nui $ fromMaybeWhole {index %itemsRef %tabRef};
    end;

selectionPane:
    Text -> # window title
    SetRef item -> # the set of items
    List ((item -> Action Unit) -> MenuItem) -> # Menu items for creating new items
    (item -> Action Any) -> # what to do when an item is activated
    (WholeRef item -> Element) ->
    Action Pane
= fns title iset createMenuItems iopen iui => do
    selection <- newMemWhole;
    return $ let
        viewItem: Action Unit
        = do
            item <- get selection;
            iopen item;
            return ();
            end;

        deleteItem: Action Unit
        = do
            item <- get selection;
            iset -= item;
            end;

        moremenus: List MenuItem
        =
            [
                menuSubmenu "Selection" $ mapList (fn mi => mi $ fn i => selection := i) createMenuItems ++
                [
                    menuAction "View" Nothing {viewItem},
                    menuAction "Delete" Nothing {deleteItem}
                ]
            ];
        in MkPane {title} (iui selection) {moremenus};
    end;

selectionPairPane:
    Text -> # pane title
    SetRef item -> # the set of items
    List ((item -> Action Unit) -> MenuItem) -> # Menu items for creating new items
    (item -> Action Any) -> # what to do when an item is activated
    (WholeRef item -> Element) -> # Element for the item selector
    (WholeRef +item -> Element) -> # Element for the selected item
    Action Pane
= fns title iset createMenuItems iopen getSelectorUI getSelectedUI =>
    selectionPane title iset createMenuItems iopen $ fn selection => let
        sidebarUI: Element
        = getSelectorUI selection;

        selectedUI: Element
        = getSelectedUI $ immutWhole selection;

        in horizontal [sidebarUI, layoutGrow selectedUI];

selectionWindow:
    Context ->
    Text -> # window title
    SetRef item -> # the set of items
    List ((item -> Action Unit) -> MenuItem) -> # Menu items for creating new items
    (item -> Action Any) -> # what to do when an item is activated
    (WholeRef item -> Element) ->
    Action Window
= fns gtk wtitle iset createMenuItems iopen iui => do
    mui <- selectionPane wtitle iset createMenuItems iopen iui;
    paneWindow gtk mui;
    end;

#| This is a two-pane window, the left has a "selector" of items (e.g. a table), and the right shows the selected item.
selectionPairWindow:
    Context ->
    Text -> # window title
    SetRef item -> # the set of items
    List ((item -> Action Unit) -> MenuItem) -> # Menu items for creating new items
    (item -> Action Any) -> # what to do when an item is activated
    (WholeRef item -> Element) -> # Element for the item selector
    (WholeRef +item -> Element) -> # Element for the selected item
    Action Window
= fns gtk wtitle iset createMenuItems iopen getSelectorUI getSelectedUI => do
    mui <- selectionPairPane wtitle iset createMenuItems iopen getSelectorUI getSelectedUI;
    paneWindow gtk mui;
    end;

newItemMenuAction: Text -> Maybe Text -> Action a -> SetRef a -> (a -> Action Unit) -> MenuItem
= fns name mkey newItem set setsel => menuAction name mkey
    {do
    item <- newItem;
    set += item;
    setsel item;
    end};

in expose
    stdWindow,
    selectionWindow,
    selectionPairWindow,
    uiPage,
    uiLabelled,
    Pane,
    MkPane,
    pane,
    paneWindow,
    notebookPane,
    selectionPane,
    selectionPairPane,
    newItemMenuAction
