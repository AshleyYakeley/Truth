#!/usr/bin/pinafore
let
import Colour;
import Cairo;
import GTK(Handler,concatDrawing,onClick);

# transform from (-1 .. +1,-1 .. +1)
scaleDrawing: WholeModel (Drawing a) -> WholeModel (Integer *: Integer -> Drawing a)
= fn rd => {fn (w,h) => let
    size = min w h;
    in translate (w / 2, h / 2) $ scale (size / 2, size / 2) %rd};

datatype Progress of
    ProgressNone;
    ProgressPartial;
    ProgressDone;
end;

drawing: WholeModel Progress -> WholeModel +(Drawing Handler)
= fn ref =>
{
    scale (0.8,0.8) $ rotate (3/4 ~* pi) $ lineWidth 0.1 $ concatDrawing
    [
        source navy $ %(toMaybeWholeModel ref) >- match
            Nothing => pureDrawing $ onClick $ ref := ProgressPartial;
            Just ProgressNone => pureDrawing $ onClick $ ref := ProgressPartial;
            Just ProgressPartial => concatDrawing
                [
                    fill $ concatPath [arc (0,0) 1 0 pi, closePath],
                    pureDrawing $ onClick $ ref := ProgressDone
                ];
            Just ProgressDone => concatDrawing
                [
                    fill $ concatPath [arc (0,0) 1 0 (2 ~* pi)],
                    pureDrawing $ onClick $ ref := ProgressNone
                ];
        end,
        stroke $ concatPath
        [
            arc (0,0) 1 0 (2 ~* pi),
            moveTo (-1,0),
            lineTo (1,0)
        ]
    ]
};

import GTK;
in run $ fn gtk => do
    ref <- newMemWholeModel;
    openWindow gtk (300,400) {"Drawing"} $ vertical
    [
        layoutGrow $ draw $ scaleDrawing $ drawing ref,
        layoutGrow $ draw $ scaleDrawing $ drawing ref
    ];
    end
