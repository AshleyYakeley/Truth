#!/usr/bin/pinafore
let
import "pinafore-media";
import "pinafore-gnome";
using GTK;
using Colour;
using Cairo;

# transform from (-1 .. +1,-1 .. +1)
scaleDrawing: WholeModel (Drawing a) -> WholeModel (Integer *: Integer -> Drawing a)
= fn rd => {fn (w,h) => let
    using Drawing;
    size = min w h;
    in translate (w / 2, h / 2) $ scale (size / 2, size / 2) %rd};

datatype Progress of
    ProgressNone;
    ProgressPartial;
    ProgressDone;
end;

drawing: WholeModel Progress -> WholeModel +(Drawing Handler)
= fn ref => let using Drawing in
{
    scale (0.8,0.8) $ rotate (3/4 *.Number pi) $ width 0.1 $ concat
    [
        source navy $ %(toMaybe.WholeModel ref) >- match
            Nothing => pure $ onClick $ ref := ProgressPartial;
            Just ProgressNone => pure $ onClick $ ref := ProgressPartial;
            Just ProgressPartial => concat
                [
                    let using Path in fill $ concat [arc (0,0) 1 0 pi, close],
                    pure $ onClick $ ref := ProgressDone
                ];
            Just ProgressDone => concat
                [
                    let using Path in fill $ concat [arc (0,0) 1 0 (2 *.Number pi)],
                    pure $ onClick $ ref := ProgressNone
                ];
        end,
        let using Path in stroke $ concat
        [
            arc (0,0) 1 0 (2 *.Number pi),
            moveTo (-1,0),
            lineTo (1,0)
        ]
    ]
};

using GTK;
in run $ fn gtk => do
    ref <- newMem.WholeModel;
    open.Window gtk (300,400) {"Drawing"} $ vertical
    [
        layoutGrow $ draw $ scaleDrawing $ drawing ref,
        layoutGrow $ draw $ scaleDrawing $ drawing ref
    ];
    end
