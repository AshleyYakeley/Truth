#!/usr/bin/pinafore
let
import Colour;
import Cairo;
import GTK();

# transform from (-1 .. +1,-1 .. +1)
scaleDrawing: WholeRef (Drawing a) -> WholeRef (Integer *: Integer -> Drawing a)
= fn rd => {fn (w,h) => let
    size = min w h;
    in translate (w / 2, h / 2) $ scale (size / 2, size / 2) %rd};

datatype Progress of
    ProgressNone;
    ProgressPartial;
    ProgressDone;
end;

drawing: WholeRef Progress -> WholeRef +(Drawing GTK.Handler)
= fn ref =>
{
    scale (0.8,0.8) $ rotate (3/4 ~* pi) $ lineWidth 0.1
    [
        source navy $ case %(toMaybeWhole ref) of
            Nothing =>
            [
                pureDrawing $ GTK.onClick $ ref := ProgressPartial
            ];
            Just ProgressNone =>
            [
                pureDrawing $ GTK.onClick $ ref := ProgressPartial
            ];
            Just ProgressPartial =>
            [
                fill [arc (0,0) 1 0 pi, closePath],
                pureDrawing $ GTK.onClick $ ref := ProgressDone
            ];
            Just ProgressDone =>
            [
                fill [arc (0,0) 1 0 (2 ~* pi)],
                pureDrawing $ GTK.onClick $ ref := ProgressNone
            ];
        end,
        stroke
        [
            arc (0,0) 1 0 (2 ~* pi),
            moveTo (-1,0),
            lineTo (1,0)
        ]
    ]
};

import GTK();
in GTK.run $ fn gtk => do
    ref <- newMemWhole;
    GTK.openWindow gtk (300,400) {"Drawing"} $ GTK.vertical
    [
        GTK.layoutGrow $ GTK.draw $ scaleDrawing $ drawing ref,
        GTK.layoutGrow $ GTK.draw $ scaleDrawing $ drawing ref
    ];
    end
