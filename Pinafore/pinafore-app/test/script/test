#!/usr/bin/pinafore

let

import UI();

### Useful
ui_page n ui = (UI.label n,ui);
ui_labelled n ui = UI.horizontal [UI.label n, UI.layoutGrow  ui];

std_window : WholeRef +Text -> UI.Element -> Action UI.Window;
std_window title contents = fixAction $ \window => let
    menus : List UI.MenuItem;
    menus =
        [
            UI.menuSubmenu "File"
            [
                UI.menuAction "Close" (Just "Ctrl+W") {UI.closeWindow window},
                UI.menuSeparator,
                UI.menuAction "Exit" (Just "Ctrl+Q") {UI.exitUI}
            ],
            UI.menuSubmenu "Edit"
            [
                UI.menuAction "Undo" (Just "Ctrl+Z") {queueUndo},
                UI.menuAction "Redo" (Just "Ctrl+Y") {queueRedo}
            ]
        ]
    in UI.openWindow (300,400) title {menus} $ UI.scrolled contents;

### People

# Ontology

opentype Type;
opentype Person;

type = property @Person @Type !"f06efa5e-190f-4e5d-8633-495c5683c124";
name = property @Person @Text !"498260df-6a8a-44f0-b285-68a63565a33b";

people = type !@ {openEntity @Type !"78baed51-cb05-46b5-bcb4-49031532b890"};

mother = property @Person @Person !"3afce58f-b7eb-4b11-8a75-2d66afd4d085";
father = property @Person @Person !"c005705f-9259-4d24-9713-db28a6e4f7d5";
# parents : WholeRef Person -> FiniteSetRef Person;
# parents p = (mother !$ p) <|> (father !$ p);
children : WholeRef Person -> FiniteSetRef Person;
children p = mother !@ p <:|:> father !@ p;

employer = property @Person @Person !"72f612af-ae47-4c18-b3df-6932ae914f62";

email = property @Person @Text !"8649b74c-123e-4ece-be3b-b734b0db3ea7";

phone = property @Person @Text !"83dfc88b-7b5b-4262-a548-0af84d5e3b63";

opentype Location;
home = property @Person @Location !"b4f7736e-2db4-486c-aae5-b6a9b1035fd0";
address = property @Location @Text !"fd83bef7-145c-4e40-a2d6-938bb5fb6da1";
locphone = property @Location @Text !"0689535c-f220-47a2-8fcb-4782574e0749";
city = property @Location @Text !"55c84133-64f2-47a6-8b3c-e01256ec9779";
postcode = property @Location @Text !"80f99100-407b-4a6b-a4f0-a025c94132b3";
province = property @Location @Text !"dffae424-28d5-4543-b1b2-b8a744bbc0cd";
country = property @Location @Text !"1257c340-0ec1-4ff7-9fd8-d2eaa7822463";

birthdate = property @Person @Text !"b711b9b3-b43c-4ff6-be12-3291cc6b050a";
deathdate = property @Person @Text !"805a9e65-d69a-4261-9c94-a3249885b6bb";
married = property @Person @Boolean !"380ac576-9252-4783-b2d8-db222c683a22";

# UI
rec
ui_people : FiniteSetRef Person -> UI.Element;
ui_people pp = UI.run $ do
    selectedperson <- newMemWhole;
    pplist <- getSetList noOrder pp;
    return $ UI.vertical
    [
        UI.button {"New Person"} {do p <- newOpenEntity @Person; pp += p; window_person p end},
        UI.button {"View Person"} {get selectedperson >>= window_person},
        UI.button {"Remove Person"} {get selectedperson >>= \p => pp -= p},
        UI.layoutGrow $ UI.listTable [({"Name"},\p => name !$ {p})] pplist window_person (Just selectedperson)
    ];
    end;

peopleByName : WholeRef +(List (Person :*: Text));
peopleByName = setList (mapOrder fst $ orderOn name alphabetical) $ (identity !** name) !$$ people;

ui_person : WholeRef Person -> UI.Element;
ui_person p = UI.vertical
[
    ui_labelled {"Name: "} $ UI.textEntry $ name !$ p,
    UI.layoutGrow $ UI.notebook unknown
    [
        ui_page {"Social"} $ UI.vertical
        [
            ui_labelled {"Email: "} $ UI.textEntry $ email !$ p,
            ui_labelled {"Phone: "} $ UI.textEntry $ phone !$ p
        ],
        ui_page {"Home"} $ let homep = home !$ p in UI.vertical
        [
            ui_labelled {"Address: "} $ UI.textArea $ address !$ homep,
            ui_labelled {"City: "} $ UI.textEntry $ city !$ homep,
            ui_labelled {"Postcode/ZIP: "} $ UI.textEntry $ postcode !$ homep,
            ui_labelled {"State/Province: "} $ UI.textEntry $ province !$ homep,
            ui_labelled {"Country: "} $ UI.textEntry $ country !$ homep,
            ui_labelled {"Phone: "} $ UI.textEntry $ locphone !$ homep
        ],
        ui_page {"Work"} $ UI.vertical
        [
            ui_labelled {"Employer: "} $ UI.textEntry $ (name !. employer) !$ p
        ],
        ui_page {"Family"} $ UI.vertical
        [
            ui_labelled {"Birth: "} $ UI.textEntry $ birthdate !$ p,
            ui_labelled {"Death: "} $ UI.textEntry $ deathdate !$ p,
            UI.checkBox {"Married"} $ married !$ p,
            ui_labelled {"Mother: "} $ UI.pick peopleByName $ mother !$ p,
            ui_labelled {"Father: "} $ UI.pick peopleByName $ father !$ p,
            UI.layoutGrow $ ui_people (children p)
        ]
    ]
];

window_person : Person -> Action UI.Window;
window_person p = std_window (name !$ {p}) (ui_person {p});

window_people : Action UI.Window;
window_people = std_window {"People"} (ui_people people);
end;

### Calculator

window_calc : Action UI.Window;
window_calc = let
opentype P;
pvalue = property @P @Number !"pvalue";
aval = pvalue !$ {openEntity @P !"a4706230-2c61-44b1-b600-516e7a54c607"};
bval = pvalue !$ {openEntity @P !"9d284ad2-e141-4114-ae50-8829a6db710f"};
in std_window {"Calc"} $ UI.vertical
[
    #UI.textEntry aval,
    #UI.textEntry bval,
    #UI.label $ aval / bval
];

### Switching Value

window_switch : Action UI.Window;
window_switch = let
opentype P;
pbool = property @P @Boolean !"pbool";
ptext = property @P @Text !"ptext";
sw_pick = pbool !$ {openEntity @P !"59eb2d87-f815-47ef-b7dc-8fe434151bb6"};
sw_val1 = ptext !$ {openEntity @P !"6d9f7afa-1091-49cc-8646-8e613bb75ee5"};
sw_val2 = ptext !$ {openEntity @P !"934712ae-73a7-4084-8a43-d618c737fd56"};
in std_window {"Switch"} $ UI.vertical
[
    #UI.textEntry sw_pick),
    UI.checkBox {"pick"} sw_pick,
    UI.layoutGrow $ UI.dynamic {if %sw_pick then UI.textArea sw_val1 else UI.textArea sw_val2}
];

### Imported Files

window_files : Action UI.Window;
window_files = let
#Files = @type !f649e7d7-7e98-4c86-919c-34f52ac12c7a;
#caption = %4a8ca041-a67d-4a1e-b212-9243fca635b0;
window_file f = std_window {"File"} $ UI.vertical
[
    #UI.textEntry $ caption f
];
in std_window {"Files"} $ UI.vertical
[
    #UI.button "Import" {file_import Files $ \f => std_window $ window_file f},
    #UI.layoutGrow $ UI.listTable [column "Caption" caption, column "Size" file_size] window_file Files
];

### Constant Edit

window_constant : Action UI.Window;
window_constant = std_window {"Constant"} $ UI.vertical
[
    UI.checkBox {"off"} {False},
    UI.checkBox {"on"} {True},
    UI.textEntry {"constant"},
    UI.layoutGrow $ UI.textArea {"constant"}
];

### CSS
window_css: Action UI.Window;
window_css = do
    cssref <- newMemWhole;
    cssref := ".y, .y > text {color:green; font-family: \"serif\";}";
    sometext <- newMemWhole;
    sometext := "whatever";
    std_window {"CSS"} $ UI.styleSheet (Debug.UI.ignoreUpdateUIExceptions cssref) $ UI.name "root" $ UI.vertical
        [
            UI.styleClass "x" $ UI.name "A" $ UI.checkBox {"Box"} {True},
            UI.styleClass "x" $ UI.name "B" $ UI.button {"Button"} {return ()},
            UI.styleClass "x" $ UI.name "C" $ UI.textEntry sometext,
            UI.layoutGrow $ UI.styleClass "y" $ UI.name "D" $ UI.textArea cssref,
            UI.styleClass "y" $ UI.name "E" $ UI.label {"Some Text"}
        ];
    end;

### Drawing
window_drawing: WholeRef +Time -> Action UI.Window;
window_drawing now = let import Colour; import Drawing in do
    tzref <- newTimeZoneRef now;
    std_window {"Drawing"} $ UI.draw {\(w,h) => let
        size = min w h;
        in case timeToLocal %tzref %now of
            DateAndTime _ (HourMinuteSecond _ _ s) =>
                translate (w / 2, h / 2) $
                scale (size, size) $
                scale (-0.5, -0.5) $
                rotate (s ~* pi ~/ 30) $
                operatorOver $
                source purple $
                lineCapSquare $
                lineWidth 0.01 $
                stroke [moveTo (0, 0), lineTo (0, 1)];
            end};
    end;

### Start Window

window_start : Action UI.Window;
window_start = do
    now <- newClock $ Seconds 1;
    timeZone <- newTimeZoneRef now;
    let
        utcDate = {%now};
        localNow = {timeToLocal %timeZone %now};
        today = {case %localNow of DateAndTime day _ => day end};
        in do
        std_window {"Pinafore"} $ UI.vertical
        [
            UI.label {"UTC time: " <> show %now},
            UI.label {"UTC date: " <> show %utcDate},
            UI.label {"Local time: " <> show %localNow},
            UI.label {"Local date: " <> show %today},
            UI.label {"Time zone offset minutes: " <> show %timeZone},
            UI.button {"People"} {window_people},
            UI.button {"Calculated Form"} {window_calc},
            UI.button {"Switch"} {window_switch},
            UI.button {"Files"} {window_files},
            UI.button {"Constant"} {window_constant},
            UI.button {"CSS"} {window_css},
            UI.button {"Drawing"} {window_drawing now},
            UI.button {"Disabled"} unknown,
            UI.layoutGrow $ UI.blank
        ];
        end;
    end;

in window_start
