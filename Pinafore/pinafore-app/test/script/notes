#!/usr/bin/pinafore
let {
    import "media";

    entitytype World;
    world = !{cell.Store @World !"pinafore-notes.world"} ?store;

    let {
        entitytype ItemType;
        entitytype ItemValue;
        datatype storable Item {
            Mk ItemType ItemValue !"pinafore-notes.Item";
        };
        namespace Item {
            new: ItemType -> Action Item =
                fn t => map.Action (Mk t) $ !{new.OpenEntity. @ItemValue};
            is: ItemType -> Item -> Boolean =
                fn t, Mk it _ => it == t;
        };
    } expose Item, ItemType, new.Item, is.Item;

    items: FiniteSetModel Item =
        !{property @Item @World !"pinafore-notes.Item-World"} ?store !@ world;

    nameOf: Property Item Text =
        !{property @Item @Text !"pinafore-notes.name"} ?store;

    namespace Note {
        itype: ItemType = !{point.OpenEntity. @ItemType !"pinafore-notes.Note"};
    };
    predicatetype storable Note <: Item = is.Item itype.Note;
    namespace Note {
        new: Action Note = map.Action (!{coerce @Note}) $ new.Item itype.Note;
    };

    notes: FiniteSetModel Note = !{dynamic.Prism @Note} !$$ items;
    content = !{property @Note @CommonMarkText !"pinafore-notes.content"} ?store;

    import "gnome", "UILib";
    with UILib;

    newNote: Command (Context.Command *: SetContext Note) =
        Mk.Command {
            name = "New Note";
            defaultKeyBinding = Just "Ctrl+K";
            action =
                fn (_,Mk.SetContext) =>
                do {
                    item <- new.Note;
                    addItem item;
                };
        };

    notePane: Note -> Pane =
        fn note =>
        let {
            noteContent: WholeModel CommonMarkText =
                content !$ ap{note};
            textModel: TextModel =
                fromWhole.TextModel $ asText.CommonMarkText !$ noteContent;
            htmlErr: Showable -> HTMLText =
                fn err => with HTMLText tag "em" $ plain "error: " <> plain (show err);
            htmlRef: WholeModel +HTMLText =
                ap{from.Result htmlErr id $ toHTML.CommonMarkText %noteContent};
        } Mk.Pane {
            titleModel = ap{"Note"};
            contents = with Widget.GTK.
                notebook unknown.WholeModel [
                    (label ap{"Edit"},scrolled $ textView textModel),
                    (label ap{"Show"},webView.WebKit htmlRef)
                ]
        };

    datatype Column -p {
        Mk {
            name: WholeModel +Text;
            contents: p -> WholeModel +Text;
        };
    };
    attributeColumn: Text -> Attribute -p +Text -> Column p =
        fn name, prop =>
            Mk.Column {
                name = ap{name};
                contents = fn item => immut.WholeModel $ prop !$ ap{item};
            };

    datatype TableSetWidget item {
        Mk {
            order: ModelOrder item;
            itemSet: FiniteSetModel item;
            columns: List (Column item);
            itemPane: item -> Pane;
        };
    };

    subtype TableSetWidget (a,+Entity) <: SetWidget (a,-Entity) =
        fn Mk.TableSetWidget => Mk.SetWidget $
            fn mSelectionModel =>
                exec.Widget.GTK $
                do {
                    itemList <- getList.FiniteSetModel order itemSet;
                    columnPairs = map.List (fn Mk.Column => (name,contents)) columns;
                    pure $ listTable.Widget.GTK. columnPairs itemList (fn item => paneWindow.Pane $ itemPane item) mSelectionModel;
                };

    notesPresentation: SetPresentation Note =
            Mk.SetPresentation {
                setName = "Notes";
                menuEntries = [newNote];
                itemSet = notes;
                itemPane = notePane;
                setWidget =
                        Mk.TableSetWidget {
                            order = on.ModelOrder nameOf order.Text;
                            columns = [
                                attributeColumn "Name" nameOf
                            ];
                            itemSet = notes;
                            itemPane = notePane;
                        };
            };
} run.Context $ fn Mk.Context =>
imply {
    ?store = store;
    ?undoHandler = undoHandler;
    ?gtk = gtk;
} do {
    pane <- present.SetPresentation notesPresentation;
    _ <- paneWindow.Pane pane;
    pure ()
}
