#!/usr/bin/pinafore

let

opentype Named;
name = property @Named @Text !"identify.name";
byName: FiniteSetModel {+a,+Named} -> WholeModel +[(a,Text)];
byName ref = finiteSetModelList (mapOrder fst $ orderOn name alphabetical) $ (identity !** name) !$$ ref;

dynamictype Person = !"type.person";
testpt = dynamicEntity @Person !"testpt";

inform: Text -> Maybe Entity -> Action Unit;
inform t mv = message.Debug $ t <> ": " <> case mv of
    Just v -> "changed: " <> entityAnchor v;
    Nothing -> "deleted";
    end;

debugWindow: Window.GTK -> Action Unit;
debugWindow window = do
    t <- Debug.windowInfo.GTK window;
    message.Debug t;
    end;

debugThing: Text -> Action a -> Action a;
debugThing t action = do
    message.Debug $ t <> ": [";
    a <- action;
    message.Debug $ t <> ": ]";
    return a;
    end;

in debugThing "SCRIPT" $ do
    selection <- newMemWholeModel;
    onWholeModelUpdate selection $ \me -> debugThing "UPDATE" $ inform "sel" me;
    selection := testpt;
    window <- fixAction $ \w -> openWindow.GTK (300,400) {"Test"} $
        dynamic.GTK $ coMapWholeModel (\e -> run.GTK $ debugThing "DYNAMIC" $ do
            # debugWindow w;
            inform "dynamic" $ Just e;
            return $ vertical.GTK [(True,label.GTK {"Set Text"})];
            end) selection
        ;
    debugWindow window;
    selection := testpt;
    debugWindow window;
    openWindow.GTK (300,400) {"Check"} $ button.GTK {"Check"} $ {debugThing "CHECK" $ do
        debugWindow window;
        selection := testpt;
        debugWindow window;
        end};
    end
