#!/usr/bin/pinafore

let
import GTK();
import UIStuff.Selection;
import UIStuff.Named;

# something with a lifespan
opentype Lifespanned;
# birth and death dates
birthdate = property @Lifespanned @Date !"lifespan.start.date";
deathdate = property @Lifespanned @Date !"lifespan.end.date";

# physical locations, that have addresses
opentype Location;
address = property @Location @Text !"location.address.withincity";
locphone = property @Location @Text !"location.telephone";
city = property @Location @Text !"location.address.city";
postcode = property @Location @Text !"location.address.postcode";
province = property @Location @Text !"location.address.province";
country = property @Location @Text !"location.address.country";

locationUI: WholeRef +Location -> GTK.Element;
locationUI loc = GTK.vertical
[
    GTK.layoutGrow $ uiLabelled {"Address: "} $ GTK.textArea (wholeRefText $ address !$% loc) unknown,
    uiLabelled {"City: "} $ GTK.textEntry $ city !$% loc,
    uiLabelled {"Postcode/ZIP: "} $ GTK.textEntry $ postcode !$% loc,
    uiLabelled {"State/Province: "} $ GTK.textEntry $ province !$% loc,
    uiLabelled {"Country: "} $ GTK.textEntry $ country !$% loc,
    uiLabelled {"Phone: "} $ GTK.textEntry $ locphone !$% loc
];

rec
# a person or organisation
dynamictype LegalEntity = Person | Organisation;
subtype LegalEntity <: Named;
subtype LegalEntity <: Lifespanned;
email = property @LegalEntity @Text !"contact.email";
phone = property @LegalEntity @Text !"contact.telephone";
home = property @LegalEntity @Location !"being.location";
legalentities: FiniteSetRef LegalEntity;
legalentities = property @LegalEntity @Unit !"type.legalentity" !@ {()};

# a person
dynamictype Person = !"type.person";
people: FiniteSetRef Person;
people = maybeMapFiniteSet (check @Person) legalentities;
# family relationships between people
mother = property @Person @Person !"relation.family.mother";
father = property @Person @Person !"relation.family.father";
children: WholeRef +Person -> FiniteSetRef Person;
children p = (mother !@% p) <:|:> (father !@% p);
married = property @Person @Boolean !"relation.family.spouse.exist";

# employment relationship
employer = property @Person @LegalEntity !"relation.employer";
employees: WholeRef +LegalEntity -> FiniteSetRef Person;
employees p = employer !@% p;

# an organisation
dynamictype Organisation = !"type.organisation";
organisations: FiniteSetRef Organisation;
organisations = property @Organisation @Unit !"type.organisation" !@ {()};
end;

### User Interface

rec
contactPages: WholeRef +LegalEntity -> List (GTK.Element :*: GTK.Element);
contactPages er =
[
    uiPage {"Social"} $ GTK.vertical
    [
        uiLabelled {"Email: "} $ GTK.textEntry $ email !$% er,
        uiLabelled {"Phone: "} $ GTK.textEntry $ phone !$% er
    ],
    uiPage {"Home"} $ locationUI $ home !$% er
];

personPages: WholeRef +Person -> List (GTK.Element :*: GTK.Element);
personPages p =
[
    uiPage {"Work"} $ GTK.vertical
    [
        uiLabelled {"Employer: "} $ GTK.pick (byName legalentities) $ employer !$% p
    ],
    uiPage {"Family"} $ familyUI p
];

familyUI: WholeRef +Person -> GTK.Element;
familyUI p = GTK.vertical
[
    uiLabelled {"Birth: "} $ GTK.textEntry $ interpretDateAsText $ birthdate !$% p,
    uiLabelled {"Death: "} $ GTK.textEntry $ interpretDateAsText $ deathdate !$% p,
    GTK.checkBox {"Married"} $ married !$% p,
    uiLabelled {"Mother: "} $ GTK.pick (byName people) $ mother !$% p,
    uiLabelled {"Father: "} $ GTK.pick (byName people) $ father !$% p,
    GTK.label {"Children:"},
    GTK.layoutGrow $ namedItemTable (children p) contactRefUI Nothing
];

organisationPages: WholeRef +Organisation -> List (GTK.Element :*: GTK.Element);
organisationPages subj =
[
    uiPage {"Employees"} $ namedItemTable (employees subj) contactRefUI Nothing
];

contactUI: LegalEntity -> GTK.Element;
contactUI e = let
    pages: List (GTK.Element :*: GTK.Element);
    pages = contactPages {e} ++ case e of
        p: Person => personPages {p};
        o: Organisation => organisationPages {o};
        end;
    in GTK.vertical
    [
        uiLabelled {"Name: "} $ GTK.textEntry $ name !$% {e},
        GTK.layoutGrow $ GTK.notebook unknown pages
    ];

contactRefUI: WholeRef +LegalEntity -> GTK.Element;
contactRefUI ref = GTK.dynamic $ coMapWhole contactUI ref;
end;

contactsPane: GTK.Context -> Action Pane;
contactsPane gtk = let
    menuItems =
    [
        newItemMenuAction "New Person" (Just "Ctrl+K") $ newDynamicEntity @Person,
        newItemMenuAction "New Organisation" Nothing $ newDynamicEntity @Organisation
    ];
    in namedPairPane gtk "Contacts" legalentities menuItems contactRefUI;

contactsWindow: GTK.Context -> Action GTK.Window;
contactsWindow gtk = do
    p <- contactsPane gtk;
    paneWindow gtk p;
    end;

in GTK.run contactsWindow
