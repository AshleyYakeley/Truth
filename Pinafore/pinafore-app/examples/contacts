#!/usr/bin/pinafore
let
import "pinafore-gnome";
import "uistuff/selection";
import "uistuff/named";

# something with a lifespan
opentype Lifespanned;
# birth and death dates
birthdate = property @Lifespanned @Date !"lifespan.start.date";
deathdate = property @Lifespanned @Date !"lifespan.end.date";

# physical locations, that have addresses
opentype Location;
address = property @Location @Text !"location.address.withincity";
locphone = property @Location @Text !"location.telephone";
city = property @Location @Text !"location.address.city";
postcode = property @Location @Text !"location.address.postcode";
province = property @Location @Text !"location.address.province";
country = property @Location @Text !"location.address.country";

locationUI: WholeModel +Location -> GTK.Element
= fn loc => GTK.vertical
[
    GTK.layoutGrow $ uiLabelled {"Address: "} $ GTK.textArea (wholeModelText $ address !$% loc),
    uiLabelled {"City: "} $ GTK.textEntry $ city !$% loc,
    uiLabelled {"Postcode/ZIP: "} $ GTK.textEntry $ postcode !$% loc,
    uiLabelled {"State/Province: "} $ GTK.textEntry $ province !$% loc,
    uiLabelled {"Country: "} $ GTK.textEntry $ country !$% loc,
    uiLabelled {"Phone: "} $ GTK.textEntry $ locphone !$% loc
];

rec
# a person or organisation
dynamictype LegalEntity = Person | Organisation;
subtype LegalEntity <: Named;
subtype LegalEntity <: Lifespanned;
email = property @LegalEntity @Text !"contact.email";
phone = property @LegalEntity @Text !"contact.telephone";
home = property @LegalEntity @Location !"being.location";
legalentities: FiniteSetModel LegalEntity
= property @LegalEntity @Unit !"type.legalentity" !@ {()};

# a person
dynamictype Person = !"type.person";
people: FiniteSetModel Person
= maybeMapFiniteSetModel (check @Person) legalentities;
# family relationships between people
mother = property @Person @Person !"relation.family.mother";
father = property @Person @Person !"relation.family.father";
children: WholeModel +Person -> FiniteSetModel Person
= fn p => (mother !@% p) <:|:> (father !@% p);
married = property @Person @Boolean !"relation.family.spouse.exist";

# employment relationship
employer = property @Person @LegalEntity !"relation.employer";
employees: WholeModel +LegalEntity -> FiniteSetModel Person
= fn p => employer !@% p;

# an organisation
dynamictype Organisation = !"type.organisation";
organisations: FiniteSetModel Organisation
= property @Organisation @Unit !"type.organisation" !@ {()};
end;

### User Interface

    rec
    contactPages: WholeModel +LegalEntity -> List (GTK.Element *: GTK.Element)
    = fn er =>
    [
        uiPage {"Social"} $ GTK.vertical
        [
            uiLabelled {"Email: "} $ GTK.textEntry $ email !$% er,
            uiLabelled {"Phone: "} $ GTK.textEntry $ phone !$% er
        ],
        uiPage {"Home"} $ locationUI $ home !$% er
    ];

    personPages: WholeModel +Person -> List (GTK.Element *: GTK.Element)
    = fn p =>
    [
        uiPage {"Work"} $ GTK.vertical
        [
            uiLabelled {"Employer: "} $ GTK.pick (byName legalentities) $ employer !$% p
        ],
        uiPage {"Family"} $ familyUI p
    ];

    familyUI: WholeModel +Person -> GTK.Element
    = fn p => GTK.vertical
    [
        uiLabelled {"Birth: "} $ GTK.textEntry $ interpretDateAsText $ birthdate !$% p,
        uiLabelled {"Death: "} $ GTK.textEntry $ interpretDateAsText $ deathdate !$% p,
        GTK.checkBox {"Married"} $ married !$% p,
        uiLabelled {"Mother: "} $ GTK.pick (byName people) $ mother !$% p,
        uiLabelled {"Father: "} $ GTK.pick (byName people) $ father !$% p,
        GTK.label {"Children:"},
        GTK.layoutGrow $ namedItemTable (children p) contactModelUI Nothing
    ];

    organisationPages: WholeModel +Organisation -> List (GTK.Element *: GTK.Element)
    = fn subj =>
    [
        uiPage {"Employees"} $ namedItemTable (employees subj) contactModelUI Nothing
    ];

    contactUI: LegalEntity -> GTK.Element
    = fn e => let
        pages: List (GTK.Element *: GTK.Element)
        = contactPages {e} ++ (e >- match
            p:? Person => personPages {p};
            o:? Organisation => organisationPages {o};
            end);
        in GTK.vertical
        [
            uiLabelled {"Name: "} $ GTK.textEntry $ name !$% {e},
            GTK.layoutGrow $ GTK.notebook unknown pages
        ];

    contactModelUI: WholeModel +LegalEntity -> GTK.Element
    = fn model => GTK.dynamic $ coMapWholeModel contactUI model;
    end;

contactsPane: GTK.Context -> Action Pane
= fn gtk => let
    menuItems =
    [
        newItemMenuAction "New Person" (Just "Ctrl+K") $ newDynamicEntity @Person,
        newItemMenuAction "New Organisation" Nothing $ newDynamicEntity @Organisation
    ];
    in namedPairPane gtk "Contacts" legalentities menuItems contactModelUI;

contactsWindow: GTK.Context -> Action GTK.Window
= fn gtk => do
    p <- contactsPane gtk;
    paneWindow gtk p;
    end;

in GTK.run contactsWindow
