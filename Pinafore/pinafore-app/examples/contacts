#!/usr/bin/pinafore
import "gnome", "UILib"
with GTK., UILib.
run.Context $ fn Mk.Context =>
imply {
    ?gtk = gtk;
    ?undoHandler = undoHandler;
    ?store = store;
} let {
    # something with a lifespan
    entitytype Lifespanned;
    # birth and death dates
    birthDateOf = !{property @Lifespanned @Date !"lifespan.start.date"} ?store;
    deathDateOf = !{property @Lifespanned @Date !"lifespan.end.date"} ?store;

    # physical locations, that have addresses
    entitytype Location;

    namespace Location {
        addressOf = !{property @Location @Text !"location.address.withincity"} ?store;
        phoneOf = !{property @Location @Text !"location.telephone"} ?store;
        cityOf = !{property @Location @Text !"location.address.city"} ?store;
        postcodeOf = !{property @Location @Text !"location.address.postcode"} ?store;
        provinceOf = !{property @Location @Text !"location.address.province"} ?store;
        countryOf = !{property @Location @Text !"location.address.country"} ?store;
    };

    locationUI: WholeModel +Location -> Widget =
        fn loc =>
        vertical.Widget [
            grow.Layout.Widget $ labelled.Widget ap{"Address: "} $ textView.Widget (fromWhole.TextModel $ addressOf.Location !$% loc),
            labelled.Widget ap{"City: "} $ textEntry.Widget $ cityOf.Location !$% loc,
            labelled.Widget ap{"Postcode/ZIP: "} $ textEntry.Widget $ postcodeOf.Location !$% loc,
            labelled.Widget ap{"State/Province: "} $ textEntry.Widget $ provinceOf.Location !$% loc,
            labelled.Widget ap{"Country: "} $ textEntry.Widget $ countryOf.Location !$% loc,
            labelled.Widget ap{"Phone: "} $ textEntry.Widget $ phoneOf.Location !$% loc
        ];

    let {
        # a person or organisation
        entitytype ContactType;
        entitytype ContactValue;
        datatype storable Contact {
            Mk ContactType ContactValue !"Mk.Contact";
        };
        newContact: ContactType -> Action Contact =
            fn t => map.Action (Mk.Contact t) $ !{new.OpenEntity @ContactValue};

        subtype Contact <: Named;
        subtype Contact <: Lifespanned;

        emailOf = !{property @Contact @Text !"contact.email"} ?store;
        phoneOf = !{property @Contact @Text !"contact.telephone"} ?store;
        homeOf = !{property @Contact @Location !"being.location"} ?store;

        contactSet: FiniteSetModel Contact =
            !{set.Store @Contact !"type.legalentity"} ?store;

        # a person
        personType: ContactType = !{point.OpenEntity @ContactType !"type.person"};
        predicatetype storable Person <: Contact = fn Mk.Contact t _ => t == personType;
        newPerson: Action Person = map.Action !{coerce @Person} $ newContact personType;

        peopleSet: FiniteSetModel Person =
        maybeMap.FiniteSetModel !{check @Person} contactSet;

        # family relationships between people
        motherOf = !{property @Person @Person !"relation.family.mother"} ?store;
        fatherOf = !{property @Person @Person !"relation.family.father"} ?store;
        childrenSet: WholeModel +Person -> FiniteSetModel Person =
            fn p => (motherOf !@% p) <:|:> (fatherOf !@% p);
        marriedOf = !{property @Person @Boolean !"relation.family.spouse.exist"} ?store;

        # employment relationship
        employerOf = !{property @Person @Contact !"relation.employer"} ?store;
        employeeSet: WholeModel +Contact -> FiniteSetModel Person =
            fn p => employerOf !@% p;

        # an organisation
        organisationType: ContactType = !{point.OpenEntity @ContactType !"type.organisation"};
        predicatetype storable Organisation <: Contact = fn Mk.Contact t _ => t == organisationType;
        newOrganisation: Action Organisation = map.Action !{coerce @Organisation} $ newContact organisationType;

        organisationSet: FiniteSetModel Organisation =
                !{set.Store @Organisation !"type.organisation"} ?store;
    };

    ### User Interface

    let rec {
        contactPages: WholeModel +Contact -> List (Widget *: Widget) =
            fn er => [
                page.Widget ap{"Social"} $ vertical.Widget [
                    labelled.Widget ap{"Email: "} $ textEntry.Widget $ emailOf !$% er,
                    labelled.Widget ap{"Phone: "} $ textEntry.Widget $ phoneOf !$% er
                ],
                page.Widget ap{"Home"} $ locationUI $ homeOf !$% er
            ];

        personPages: WholeModel +Person -> List (Widget *: Widget) =
            fn p => [
                page.Widget ap{"Work"} $ vertical.Widget [
                    labelled.Widget ap{"Employer: "} $ pick.Widget (toList.Named contactSet) $ employerOf !$% p
                ],
                page.Widget ap{"Family"} $ familyUI p
            ];

        familyUI: WholeModel +Person -> Widget =
            fn p =>
            vertical.Widget [
                labelled.Widget ap{"Birth: "} $ textEntry.Widget $ asText.Date !$ birthDateOf !$% p,
                labelled.Widget ap{"Death: "} $ textEntry.Widget $ asText.Date !$ deathDateOf !$% p,
                checkBox.Widget ap{"Married"} $ marriedOf !$% p,
                labelled.Widget ap{"Mother: "} $ pick.Widget (toList.Named peopleSet) $ motherOf !$% p,
                labelled.Widget ap{"Father: "} $ pick.Widget (toList.Named peopleSet) $ fatherOf !$% p,
                label.Widget ap{"Children:"},
                grow.Layout.Widget $ toWidget.SetWidget $ table.Named (childrenSet p) contactUI
            ];

        organisationPages: WholeModel +Organisation -> List (Widget *: Widget) =
            fn subj => [
                page.Widget ap{"Employees"} $ toWidget.SetWidget $ table.Named (employeeSet subj) contactUI
            ];

        contactUI: Contact -> Widget =
            fn c =>
            let {
                pages: List (Widget *: Widget) =
                contactPages ap{c} <>.List (c >- fn {
                    p:? Person => personPages ap{p};
                    o:? Organisation => organisationPages ap{o};
                });
            } vertical.Widget [
                labelled.Widget ap{"Name: "} $ textEntry.Widget $ nameOf.Named !$% ap{c},
                grow.Layout.Widget $ notebook.Widget unknown pages
            ];
    };

    newPerson: Command (Context.Command *: SetContext Contact) =
        Mk.Command {
            name = "New Person";
            defaultKeyBinding = Just "Ctrl+K";
            action =
                fn (_,Mk.SetContext) =>
                do {
                    item <- newPerson;
                    addItem item;
                };
        };

    newOrganisation: Command (Context.Command *: SetContext Contact) =
        Mk.Command {
            name = "New Organisation";
            defaultKeyBinding = Just "Ctrl+K";
            action =
                fn (_,Mk.SetContext) =>
                do {
                    item <- newOrganisation;
                    addItem item;
                };
        };

    contactsPresentation: SetPresentation Contact =
        Mk.SetPresentation {
            setName = "Contacts";
            itemSet = contactSet;
            menuEntries = [newPerson, newOrganisation];
            itemPane = pane.Named contactUI;
            setWidget = table.Named contactSet contactUI;
        };

    contactsWindow: Action Window =
        do {
            p <- presentWithItem.SetPresentation contactsPresentation;
            paneWindow.Pane p;
        };
} contactsWindow
