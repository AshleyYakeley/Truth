#!/usr/bin/pinafore
import "pinafore-gnome", "UILib" in
with GTK., UILib. in
run.Context $ fn context =>
let

    Mk.Context.Named = mkContext.Named context;

    ### EventTime

    # An event can either be at a particular time, or a whole-day event.
    datatype storable EventTime of
        Date Date !"Date"; # all-day event
        Time LocalTime !"Time"; # event at a time
    end;

    showEventTime: EventTime -> Text
    = match
        Date.EventTime d => encode (unixAsText.Date "%F") d;
        Time.EventTime t => encode (unixAsText.LocalTime "%F %R") t;
        end;

    eventTimeDate: EventTime -> Date
    = match
        Date.EventTime d => d;
        Time.EventTime (DateAndTime d _) => d
        end;

    setEventTimeDate: Date -> Maybe EventTime -> Maybe EventTime
    = fn d, et => Just $ et >- match
        Just (Time.EventTime (DateAndTime _ t)) => Time.EventTime (DateAndTime d t);
        _ => Date.EventTime d;
        end;

    eventModelTimeDate: WholeModel EventTime -> WholeModel Date
    = fn r => lensMap.WholeModel eventTimeDate setEventTimeDate r;

    eventModelTimeTimeOfDay: WholeModel EventTime -> WholeModel TimeOfDay
    = fn r => let
        eventTimeTimeOfDay: Maybe EventTime -> Maybe TimeOfDay
        = match
            Just (Time.EventTime (DateAndTime _ tod)) => Just tod;
            _ => Nothing;
            end;

    setEventTimeTimeOfDay: Maybe TimeOfDay -> Maybe EventTime -> Maybe (Maybe EventTime)
    = fn mtod, met => Just $ met >- match
        Nothing => Nothing;
        Just et => Just $ mtod >- match
            Nothing => Date.EventTime $ eventTimeDate et;
            Just tod => Time.EventTime $ DateAndTime (eventTimeDate et) tod;
            end;
        end;
    in maybeLensMap.WholeModel eventTimeTimeOfDay setEventTimeTimeOfDay r;

    # for ordering
    eventTimeTime: EventTime -> LocalTime
    = match
        Date.EventTime d => DateAndTime d midnight;
        Time.EventTime t => t
        end;

    eventTimeOrder: ModelOrder EventTime
    = map.ModelOrder eventTimeTime localChronological;


    ### Event

    opentype Event;
    subtype Event <: Named;
    events: FiniteSetModel Event
    = property @Event @Unit !"type.event" store !@ {()};

    eventTime = property @Event @EventTime !"event.time" store;
    eventNotes = property @Event @Text !"item.description" store;

    eventOrder: ModelOrder Event
    = on.ModelOrder eventTime eventTimeOrder;

    eventData: FiniteSetModel (EventTime *: Text)
    = (eventTime **.Property name) !$$ events;

    eventDataOrder: ModelOrder (EventTime *: Text)
    = map.ModelOrder fst eventTimeOrder;

    eventList: WholeModel +Date -> WholeModel +(List (EventTime *: Text))
    = fn todaymodel => {
        let
            today: Date = %todaymodel;

            pickCurrent: EventTime *: Text -> Boolean
            = fn (t,_) => ge $ calendrical (eventTimeDate t) today;
        in (Date.EventTime today,"Today") :: filter pickCurrent %(toList.FiniteSetModel eventDataOrder eventData)
        };


    ### GTK

    # Text for the overview tab.
    overviewModel: WholeModel +Date -> WholeModel +Text
    = fn todaymodel => {concat.Text $ map.List (fn (t,n) => showEventTime t <>.Text ": " <>.Text n <>.Text "\n") %(eventList todaymodel)};

    # Overview tab GTK
    overviewPane: Pane
    = simple.Pane "Overview" $ exec.Element $ do
        now <- newClock $ Seconds 60; # update every minute
        tz <- newTimeZoneModel.LocalTime now;
        pure $ label.Element $ overviewModel {fromTime.LocalTime %tz %now >- match DateAndTime d _ => d end};
        end;

    calendarWindow: WholeModel +Event -> Action Window
    = fn evt => mfix $ fn window =>
        open.Window gtk (200,200) {"date of " <>.Text %(name !$% evt)} $ vertical.Element
        [
            calendar.Element $ eventModelTimeDate $ eventTime !$% evt,
            button.Element {"Done: " <>.Text show %(eventModelTimeDate $ eventTime !$% evt)} {close.Window window}
        ];

    eventUI: WholeModel +Event -> Element
    = fn evt => vertical.Element
    [
        textEntry.Element $ name !$% evt,
        horizontal.Element
        [
            button.Element {"cal"} {calendarWindow evt},
            textEntry.Element $ reverse.Prism asText.Date !$ (eventModelTimeDate $ eventTime !$% evt),
            textEntry.Element $ reverse.Prism (unixAsText.TimeOfDay "%H:%M") !$ (eventModelTimeTimeOfDay $ eventTime !$% evt)
        ],
        layoutGrow.Element $ textArea.Element (fromWhole.TextModel $ eventNotes !$% evt)
    ];

    eventWindow: Event -> Action Window
    = fn evt => paneWindow $ namedPane eventUI {evt};

    newEvent: Action Event
    = do
        item <- newOpenEntity @Event;
        day <- getNowLocal.Date;
        eventTime !$ {item} := Date.EventTime day;
        name !$ {item} := "";
        pure item;
        end;

    eventsTableUI: WholeModel Event -> Element
    = fn selection => let
        columns: List (WholeModel +Text *: (Event -> WholeModel Text))
        = let
            timeColumn: WholeModel +Text *: (Event -> WholeModel Text)
            = ({"When"},fn e => {showEventTime $ %(eventTime !$ {e})});
            nameColumn: WholeModel +Text *: (Event -> WholeModel Text)
            = ({"What"},fn e => name !$ {e});
            in [timeColumn,nameColumn];
        in exec.Element $ do
            lm <- getList.FiniteSetModel eventOrder events;
            pure $ listTable.Element columns lm eventWindow (Just selection);
            end;

    eventsPresentation: SetPresentation Event
    = let
        title = "Events";
        itemSet = events;
        newItems =
        [
            let name = "New Event"; mkey = Just "Ctrl+K"; newItem = newEvent in Mk.NewItem
        ];
        itemOpenAction = fn evt => eventWindow evt >> pure ();
        itemElement = eventUI;
        listElement = eventsTableUI;
        in Mk.SetPresentation;

in do
    eventsPane <- presentList.Pane eventsPresentation;
    p <- notebook.Pane {"Events"} [overviewPane,eventsPane];
    paneWindow p
    end
