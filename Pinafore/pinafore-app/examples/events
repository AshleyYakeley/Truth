#!/usr/bin/pinafore
import "gnome", "UILib" in
with
    GTK.,
    UILib.
in
run.Context $ fn Mk.Context =>
imply
    ?gtk = gtk;
    ?undoHandler = undoHandler;
    ?store = store;
in
let

    ### EventTime

    # An event can either be at a particular time, or a whole-day event.
    datatype storable EventTime of
        MkDate Date !"Date"; # all-day event
        MkTime LocalTime !"Time"; # event at a time
    end;

    namespace EventTime of

        subtype EventTime <: Showable =
        match
            MkDate d => Mk.Showable $ encode (unixAsText.Date "%F") d;
            MkTime t => Mk.Showable $ encode (unixAsText.LocalTime "%F %R") t;
        end;

        dateOf: Lens EventTime Date =
        let
            getDate: EventTime -> Date =
            match
                MkDate d => d;
                MkTime (DateAndTime d _) => d
            end;

            setDate: EventTime -> Date -> EventTime =
            match
                MkTime (DateAndTime _ t) => fn d => MkTime (DateAndTime d t);
                _ => MkDate;
            end;
        in
        Mk.Lens getDate setDate;

        timeOfDayModel: WholeModel EventTime -> WholeModel TimeOfDay =
        let
            getTimeOfDay: Maybe EventTime -> Maybe TimeOfDay =
            match
                Just (MkTime (DateAndTime _ tod)) => Just tod;
                _ => Nothing;
            end;

            setTimeOfDay: Maybe TimeOfDay -> Maybe EventTime -> Maybe (Maybe EventTime) =
            fn mtod, met =>
            Just $ met >-
            match
                Nothing => Nothing;
                Just et =>
                    Just $ mtod >-
                    match
                        Nothing => MkDate $ fetch dateOf et;
                        Just tod => MkTime $ DateAndTime (fetch dateOf et) tod;
                    end;
            end;
        in maybeLensMap.WholeModel getTimeOfDay setTimeOfDay;

        # for ordering
        getTime: EventTime -> LocalTime =
        match
            MkDate d => DateAndTime d midnight;
            MkTime t => t
        end;

        order: ModelOrder EventTime =
        map.ModelOrder getTime order.LocalTime;

    end;

    ### Event

    opentype Event;
    subtype Event <: Named;

    namespace Event of

        eventSet: FiniteSetModel Event =
        set.Store @Event !"type.event" ?store;

        timeOf = property @Event @EventTime !"event.time" ?store;

        notesOf = property @Event @Text !"item.description" ?store;

        order: ModelOrder Event =
        on.ModelOrder timeOf order.EventTime;

        forDayModel: WholeModel +Date -> WholeModel +(List (EventTime *: Text)) =
        let

            eventData: FiniteSetModel (EventTime *: Text) =
            (timeOf.Event **.Property nameOf.Named) !$$ eventSet;

            eventDataOrder: ModelOrder (EventTime *: Text) =
            map.ModelOrder fst order.EventTime;

            orderedEventsModel: WholeModel +(List (EventTime *: Text)) =
            toList.FiniteSetModel eventDataOrder eventData;

        in
        fn todaymodel =>
        {
            let

                today: Date = %todaymodel;

                pickCurrent: EventTime *: Text -> Boolean =
                fn (t,_) =>
                ge $ order.Date (fetch dateOf.EventTime t) today;

                todayEvent: EventTime *: Text =
                (MkDate.EventTime today,"Today");

                futureEvents: List (EventTime *: Text) =
                filter pickCurrent %orderedEventsModel;

            in todayEvent :: futureEvents
        };

    end;


    ### GTK

    # Text for the overview tab.
    overviewModel: WholeModel +Date -> WholeModel +Text =
    fn todaymodel =>
    {
        concat.Text $
        map.List (fn (t,n) => show t <>.Text ": " <>.Text n <>.Text "\n") %(forDayModel.Event todaymodel)
    };

    # Overview tab GTK
    overviewPane: Pane =
    simple.Pane "Overview" $
    exec.Widget $
    do
        now <- newClock $ Seconds 60; # update every minute
        tz <- newTimeZoneModel.LocalTime now;
        pure $ label.Widget $ overviewModel {fromTime.LocalTime %tz %now >- match DateAndTime d _ => d end};
    end;

    calendarWindow: WholeModel +Event -> Action Window =
    fn evt =>
    mfix $
    fn window =>
    open.Window gtk (200,200) {"date of " <>.Text %(nameOf.Named !$% evt)} $ vertical.Widget
    [
        calendar.Widget $ dateOf.EventTime !$ (timeOf.Event !$% evt),
        button.Widget {"Done: " <>.Text show %(dateOf.EventTime !$ timeOf.Event !$% evt)} {close.Window window}
    ];

    eventUI: Event -> Widget =
    fn evt =>
    vertical.Widget
    [
        textEntry.Widget $ nameOf.Named !$% {evt},
        horizontal.Widget
        [
            button.Widget {"cal"} {calendarWindow {evt}},
            textEntry.Widget $ asText.Date !$ (dateOf.EventTime !$ timeOf.Event !$% {evt}),
            textEntry.Widget $ unixAsText.TimeOfDay "%H:%M" !$ (timeOfDayModel.EventTime $ timeOf.Event !$% {evt})
        ],
        layoutGrow.Widget $ textView.Widget (fromWhole.TextModel $ notesOf.Event !$% {evt})
    ];

    eventWindow: Event -> Action Window =
    fn evt =>
    paneWindow.Pane $ pane.Named eventUI evt;

    newEvent: Command (Context.Command *: SetContext Event) =
        Mk.Command of
            name = "New Event";
            defaultKeyBinding = Just "Ctrl+K";
            action =
                fn (_,Mk.SetContext) =>
                do
                    item <- new.OpenEntity @Event;
                    day <- getNowLocal.Date;
                    timeOf.Event !$ {item} := MkDate.EventTime day;
                    nameOf.Named !$ {item} := "";
                    addItem item;
                end;
        end;

    eventsTableUI: SetWidget Event =
    Mk.SetWidget $
    fn mSelectionModel =>
    let
        columns: List (WholeModel +Text *: (Event -> WholeModel Text)) =
        let
            timeColumn: WholeModel +Text *: (Event -> WholeModel Text)
            = ({"When"},fn e => {show $ %(timeOf.Event !$ {e})});
            column: WholeModel +Text *: (Event -> WholeModel Text)
            = ({"What"},fn e => nameOf.Named !$ {e});
        in
        [timeColumn,column];
    in
    exec.Widget $
    do
        lm <- getList.FiniteSetModel order.Event eventSet.Event;
        pure $ listTable.Widget columns lm eventWindow mSelectionModel;
    end;

    eventsPresentation: SetPresentation Event =
    Mk.SetPresentation of
        setName = "Events";
        itemSet = eventSet.Event;
        menuEntries = [newEvent];
        itemPane = pane.Named eventUI;
        setWidget = eventsTableUI;
    end;

in
do
    eventsPane <- presentWithItem.SetPresentation eventsPresentation;
    p <- notebook.Pane {"Events"} [overviewPane,eventsPane];
    paneWindow.Pane p
end
