#!/usr/bin/pinafore
import "gnome", "UILib"
with GTK., UILib.
run.Context $ fn Mk.Context =>
imply {
    ?gtk = gtk;
    ?undoHandler = undoHandler;
    ?store = store;
}
let {
    ### EventTime

    # An event can either be at a particular time, or a whole-day event.
    datatype storable EventTime {
        MkDate Date !"Date"; # all-day event
        MkTime LocalTime !"Time"; # event at a time
    };

    namespace EventTime {
        subtype EventTime <: Showable =
            fn {
                MkDate d => Mk.Showable $ encode (unixAsText.Date "%F") d;
                MkTime t => Mk.Showable $ encode (unixAsText.LocalTime "%F %R") t;
            };

        dateOf: Lens EventTime Date =
            let {
                getDate: EventTime -> Date =
                    fn {
                        MkDate d => d;
                        MkTime (DateAndTime d _) => d
                    };

                setDate: EventTime -> Date -> EventTime =
                    fn {
                        MkTime (DateAndTime _ t) => fn d => MkTime (DateAndTime d t);
                        _ => MkDate;
                    };
            } Mk.Lens getDate setDate;

        timeOfDayModel: WholeModel EventTime -> WholeModel TimeOfDay =
            let {
                getTimeOfDay: Maybe EventTime -> Maybe TimeOfDay =
                    fn {
                        Just (MkTime (DateAndTime _ tod)) => Just tod;
                        _ => Nothing;
                    };

                setTimeOfDay: Maybe TimeOfDay -> Maybe EventTime -> Maybe (Maybe EventTime) =
                    fn mtod, met =>
                    Just $ met >- map.Maybe (fn et =>
                        mtod >-
                            fn {
                                Nothing => MkDate $ fetch dateOf et;
                                Just tod => MkTime $ DateAndTime (fetch dateOf et) tod;
                            }
                        );
            } maybeLensMap.WholeModel getTimeOfDay setTimeOfDay;

        # for ordering
        getTime: EventTime -> LocalTime =
            fn {
                MkDate d => DateAndTime d midnight;
                MkTime t => t;
            };

        order: ModelOrder EventTime =
            map.ModelOrder getTime order.LocalTime;
    };

    ### Event

    entitytype Event;
    subtype Event <: Named;

    namespace Event {
        eventSet: FiniteSetModel Event =
        set.Store @Event !"type.event" ?store;

        timeOf = property @Event @EventTime !"event.time" ?store;

        notesOf = property @Event @Text !"item.description" ?store;

        order: ModelOrder Event =
        on.ModelOrder timeOf order.EventTime;

        forDayModel: WholeModel +Date -> WholeModel +(List (EventTime *: Text)) =
            let {
                eventData: FiniteSetModel (EventTime *: Text) =
                    (timeOf.Event **.Property nameOf.Named) !$$% eventSet;

                eventDataOrder: ModelOrder (EventTime *: Text) =
                    map.ModelOrder fst order.EventTime;

                orderedEventsModel: WholeModel +(List (EventTime *: Text)) =
                    toList.FiniteSetModel eventDataOrder eventData;
            }
            fn todaymodel =>
                ap{
                    let {
                        today: Date = %todaymodel;

                        pickCurrent: EventTime *: Text -> Boolean =
                        fn (t,_) =>
                        ge $ order.Date (fetch dateOf.EventTime t) today;

                        todayEvent: EventTime *: Text =
                        (MkDate.EventTime today,"Today");

                        futureEvents: List (EventTime *: Text) =
                        filter pickCurrent %orderedEventsModel;
                    } todayEvent :: futureEvents
                };
    };


    ### GTK

    # Text for the overview tab.
    overviewModel: WholeModel +Date -> WholeModel +Text =
        fn todaymodel => ap{
            concat.Text $
            map.List (fn (t,n) => show t <>.Text ": " <>.Text n <>.Text "\n") %(forDayModel.Event todaymodel)
        };

    # Overview tab GTK
    overviewPane: Pane =
        simple.Pane "Overview" $
        exec.Widget $
        do {
            now <- newClock $ Seconds 60; # update every minute
            tz <- newTimeZoneModel.LocalTime now;
            pure $ label.Widget $ overviewModel ap{fromTime.LocalTime %tz %now >- fn DateAndTime d _ => d};
        };

    calendarWindow: WholeModel +Event -> Action Window =
        fn evt =>
        mfix $
        fn window =>
        open.Window gtk (200,200) ap{"date of " <>.Text %(nameOf.Named !$% evt)} $ vertical.Widget [
            calendar.Widget $ dateOf.EventTime !$ (timeOf.Event !$% evt),
            button.Widget ap{"Done: " <>.Text show %(dateOf.EventTime !$ timeOf.Event !$% evt)} ap{close.Window window}
        ];

    eventUI: Event -> Widget =
        fn evt =>
        vertical.Widget [
            textEntry.Widget $ nameOf.Named !$% ap{evt},
            horizontal.Widget [
                button.Widget ap{"cal"} ap{calendarWindow ap{evt}},
                textEntry.Widget $ asText.Date !$ (dateOf.EventTime !$ timeOf.Event !$% ap{evt}),
                textEntry.Widget $ unixAsText.TimeOfDay "%H:%M" !$ (timeOfDayModel.EventTime $ timeOf.Event !$% ap{evt})
            ],
            grow.Layout.Widget $ textView.Widget (fromWhole.TextModel $ notesOf.Event !$% ap{evt})
        ];

    eventWindow: Event -> Action Window =
        fn evt =>
        paneWindow.Pane $ pane.Named eventUI evt;

    newEvent: Command (Context.Command *: SetContext Event) =
            Mk.Command {
                name = "New Event";
                defaultKeyBinding = Just "Ctrl+K";
                action =
                    fn (_,Mk.SetContext) => do {
                        item <- new.OpenEntity @Event;
                        day <- getNowLocal.Date;
                        timeOf.Event !$ ap{item} := MkDate.EventTime day;
                        nameOf.Named !$ ap{item} := "";
                        addItem item;
                    };
            };

    eventsTableUI: SetWidget Event =
        Mk.SetWidget $
        fn mSelectionModel =>
        let {
            columns: List (WholeModel +Text *: (Event -> WholeModel Text)) =
            let {
                timeColumn: WholeModel +Text *: (Event -> WholeModel Text) =
                    (ap{"When"},fn e => ap{show $ %(timeOf.Event !$ ap{e})});
                column: WholeModel +Text *: (Event -> WholeModel Text) =
                    (ap{"What"},fn e => nameOf.Named !$ ap{e});
            } [timeColumn,column];
        } exec.Widget $ do {
                lm <- getList.FiniteSetModel order.Event eventSet.Event;
                pure $ listTable.Widget columns lm eventWindow mSelectionModel;
        };

    eventsPresentation: SetPresentation Event =
        Mk.SetPresentation {
            setName = "Events";
            itemSet = eventSet.Event;
            menuEntries = [newEvent];
            itemPane = pane.Named eventUI;
            setWidget = eventsTableUI;
        };
} do {
    eventsPane <- presentWithItem.SetPresentation eventsPresentation;
    p <- notebook.Pane ap{"Events"} [overviewPane,eventsPane];
    paneWindow.Pane p
}
