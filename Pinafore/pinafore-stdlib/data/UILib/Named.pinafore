import "pinafore-gnome", "UILib/Context", "UILib/Pane" in
with GTK in
namespace UILib of

    #| An open entity type; something with a name
    opentype Named;

    namespace Named of

        #| "name" property for a given store, etc.
        datatype Props of
            Mk of
                #| A name is a text that identifies (in some sense) an entity.
                name: Property Named Text;
                #| Order alphabetically (case-insensitive) by name
                nameOrder: ModelOrder Named;
                #| Order a set of entities by their names.
                byName: FiniteSetModel {+a,+Named} -> WholeModel +(List (a *: Text));
            end;
        end;

        mkProps: Store -> Props
        = fn store => let
            name = property @Named @Text !"identify.name" store;
            nameOrder = on.ModelOrder name alphabetical.Order;
            byName = fn model => toList.FiniteSetModel (map.ModelOrder fst.Product nameOrder) $ (id.Property **.Property name) !$$ model;
            in Mk.Props;

        datatype Context <: Context.Pane & Props of
            Mk of
                Mk.Context.Pane;
                Mk.Props;

                #| A pane for an element, where the title is the name of the element.
                namedPane: (a -> Element) -> (a & Named) -> Pane;

                #| A "name" column for `listTable.Element`.
                nameColumn: WholeModel +Text *: (Named -> WholeModel Text);

                #| A `SetElement` for this set that's a list of elements by name.
                namedTable: FiniteSetModel {a,+Named} -> (a -> Element) -> SetElement {a,-Named};
            end;
        end;

        mkContext: Context.UILib -> Context.Named
        = fn Mk.Context.UILib => let
            Mk.Context.Pane = mkContext.Pane Mk.Context.UILib;

            Mk.Props = mkProps store;

            namedPane = fn itemElement, e => let
                titleModel= name !$% {e};
                extraMenusModel = {[]};
                element = itemElement e;
                in Mk.Pane;

            nameColumn = ({"Name"},fn p => name !$ {p});

            namedTable = fn sm, itemElement => Mk.SetElement $ fn msel => exec.Element $ do
                lm <- getList.FiniteSetModel nameOrder sm;
                pure.Action $ listTable.Element [nameColumn] lm (fn e => paneWindow $ namedPane itemElement e) msel;
                end;

        in Mk.Context.Named;

    end

end;
