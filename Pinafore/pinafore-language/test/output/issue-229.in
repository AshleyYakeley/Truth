#!/usr/bin/pinafore
let rec {
  datatype Value {
    Lit Integer;
    Func (Value -> Value);
  };

  subtype Integer <: Value = Lit.Value;
  subtype (Value -> Value) <: Value = Func.Value;

  i = fn x => x;
  m = fn x => x x;
  mi = m i;

  miv: Value = mi;
} outputLn.Env $
miv >-
fn {
  Lit.Value l => show l;
  Func.Value f => f 467 >- fn {
    Lit.Value l => show l;
    Func.Value _ => "func";
  }
}
