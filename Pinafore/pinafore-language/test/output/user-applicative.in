#!/usr/bin/pinafore

let {
  let rec {
    datatype Value {
      Lit Literal;
      Func (Value -> Value);
      Err Text;
    };
  };

  namespace Value {
    subtype Value <: Showable =
      fn {
        Lit l => l >-
          fn {
            v :? Text => v;
            v :? Number => v;
            _ => Mk.Showable "<literal>";
          };
        Func _ => Mk.Showable "<function>";
        Err e => Mk.Showable $ "<#error " <>.Text e <>.Text ">";
      };

    apply: Value -> Value -> Value =
      fn {
        Func f => f;
        Err e => fn _ => Err e;
        v => fn _ => Err $ show v <>.Text " not a function";
      };
  };

  let rec {
    datatype Expr +a {
      Closed a;
      Open Text (Expr (Value -> a));
    };
  };

  namespace Expr {
    var: Text -> Expr Value = fn name => Open name $ Closed id;

    let rec {
      map: (a -> b) -> Expr a -> Expr b =
        fn f => fn {
          Closed a => Closed $ f a;
          Open name expr => Open name $ map (fn va,v => f $ va v) expr;
        };

      pure: a -> Expr a = Closed;

      apply: Expr (a -> b) -> Expr a -> Expr b = fn eab,ea =>
        eab >- fn {
          Closed ab => map ab ea;
          Open name evab => Open name $ apply (map (fn vab,a,v => vab v a) evab) ea
        };

      liftA2: (a -> b -> c) -> Expr a -> Expr b -> Expr c = fn f,expr => apply $ map f expr;

      (**): Expr a -> Expr b -> Expr (a *: b) = liftA2 $ fn a,b => (a,b);

      (>>): Expr a -> Expr b -> Expr b = liftA2 $ fn _,b => b;

      abstract: Text -> Expr a -> Expr (Value -> a) =
        fn n => fn {
          Closed a => Closed $ fn _ => a;
          Open vn expr => if n == vn
            then map (fn f, v => f v v) $ abstract n expr
            else Open vn $ map (fn vva, v1, v2 => vva v2 v1) $ abstract n expr
        };

      freenames: Expr Any -> List Text =
        fn {
          Closed _ => [];
          Open n expr => n :: freenames expr;
        };

      eval: Expr a -> a =
        fn {
          Closed a => a;
          Open n expr => error $ "undefined: " <>.Text n;
        };
    };
  };

  with Expr;

  k: Expr (Value -> Value -> Value) =
      abstract "a" $ abstract "b" $ var "a";

  i: Expr (Value -> Value) = abstract "a" $ var "a";
} do {
  outputLn.Env $ show $ Lit.Value 47;
  outputLn.Env $ show $ eval ap.Expr{Lit.Value 17};
  outputLn.Env $ show $ eval ap.Expr{%k (Lit.Value 12) (Lit.Value 37)};
}
