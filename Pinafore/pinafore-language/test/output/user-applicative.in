#!/usr/bin/pinafore

let

    rec
        datatype Value of
            Lit Literal;
            Func (Value -> Value);
            Err Text;
        end;
    end;

    namespace Value of

        subtype Value <: Showable =
            match
                Lit l => l >-
                    match
                        v :? Text => v;
                        v :? Number => v;
                        _ => Mk.Showable "<literal>";
                    end;
                Func _ => Mk.Showable "<function>";
                Err e => Mk.Showable $ "<#error " <>.Text e <>.Text ">";
            end;

        apply: Value -> Value -> Value =
            match
                Func f => f;
                Err e => fn _ => Err e;
                v => fn _ => Err $ show v <>.Text " not a function";
            end;
    end;

    rec
        datatype Expr +a of
            Closed a;
            Open Text (Expr (Value -> a));
        end;
    end;

    namespace Expr of
        var: Text -> Expr Value = fn name => Open name $ Closed id;

        rec
            map: (a -> b) -> Expr a -> Expr b =
                fn f =>
                    match
                        Closed a => Closed $ f a;
                        Open name expr => Open name $ map (fn va,v => f $ va v) expr;
                    end;

            pure: a -> Expr a = Closed;

            ap: Expr (a -> b) -> Expr a -> Expr b = fn eab,ea =>
                eab >- match
                    Closed ab => map ab ea;
                    Open name evab => Open name $ ap (map (fn vab,a,v => vab v a) evab) ea
                end;

            liftA2: (a -> b -> c) -> Expr a -> Expr b -> Expr c = fn f,expr => ap $ map f expr;

            (**): Expr a -> Expr b -> Expr (a *: b) = liftA2 $ fn a,b => (a,b);

            (>>): Expr a -> Expr b -> Expr b = liftA2 $ fn _,b => b;

            abstract: Text -> Expr a -> Expr (Value -> a) =
                fn n =>
                    match
                        Closed a => Closed $ fn _ => a;
                        Open vn expr => if n == vn
                            then map (fn f, v => f v v) $ abstract n expr
                            else Open vn $ map (fn vva, v1, v2 => vva v2 v1) $ abstract n expr
                    end;

            freenames: Expr Any -> List Text =
                match
                    Closed _ => [];
                    Open n expr => n :: freenames expr;
                end;

            eval: Expr a -> a =
                match
                    Closed a => a;
                    Open n expr => error $ "undefined: " <>.Text n;
                end;
        end;
    end;

    using Expr;

    k: Expr (Value -> Value -> Value) =
        abstract "a" $ abstract "b" $ var "a";

    i: Expr (Value -> Value) = abstract "a" $ var "a";

in do
    outputLn.Env $ show $ Lit.Value 47;
    outputLn.Env $ show $ eval {.Expr Lit.Value 17};
    outputLn.Env $ show $ eval {.Expr %k (Lit.Value 12) (Lit.Value 37)};
    end
