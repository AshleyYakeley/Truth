pinafore> let f: ((a -> a) & b) -> Maybe b; f = Just
pinafore> let i: a -> a; i x = x;
pinafore> :type f
: (a -> a & b) -> Maybe b
pinafore> :type i
: a -> a
pinafore> :type f i
: Maybe (i -> i)
pinafore> 
pinafore> let g: ((a -> a) & b) -> b; g x = x
pinafore> :type g
: (a -> a & b) -> b
pinafore> :type g i
: i -> i
pinafore> 
pinafore> let ur: WholeRef a -> Unit; ur _ = ()
pinafore> :type ur
: WholeRef a -> Unit
pinafore> :type newMemWhole >>= \ref => return (ref, ())
: Action (WholeRef c *: Unit)
pinafore> :type newMemWhole >>= \ref => return (ref, ((\_ => ()) : WholeRef a -> Unit) ref)
: Action (WholeRef l *: Unit)
pinafore> :type \ref => return (ref, ur ref)
: (b & WholeRef c) -> Action (b *: Unit)
pinafore> :type newMemWhole >>= \ref => return (ref, ur ref)
: Action (WholeRef l *: Unit)
pinafore> <END>
