pinafore> let f: ((a -> a) & b) -> Maybe b = Just
pinafore> let i: a -> a = fn x => x;
pinafore> :type f
: (a -> a & b) -> Maybe b
pinafore> :type i
: a -> a
pinafore> :type f i
: Maybe (a -> a)
pinafore> 
pinafore> let g: ((a -> a) & b) -> b = fn x => x
pinafore> :type g
: (a -> a & b) -> b
pinafore> :type g i
: a -> a
pinafore> 
pinafore> let ur: WholeRef a -> Unit = fn _ => ()
pinafore> :type ur
: WholeRef a -> Unit
pinafore> :type newMemWhole >>= fn ref => return (ref, ())
: Action (WholeRef a *: Unit)
pinafore> :type newMemWhole >>= fn ref => return (ref, ((fn _ => ()) : WholeRef a -> Unit) ref)
: Action (WholeRef a *: Unit)
pinafore> :type fn ref => return (ref, ur ref)
: (WholeRef a & b) -> Action (b *: Unit)
pinafore> :type newMemWhole >>= fn ref => return (ref, ur ref)
: Action (WholeRef a *: Unit)
pinafore> <END>
