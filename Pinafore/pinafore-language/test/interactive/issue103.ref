pinafore> let f: ((a -> a) & b) -> Maybe b = Just
pinafore> let i: a -> a = fn x => x;
pinafore> :type f
: (a -> a & b) -> Maybe b
pinafore> :type i
: a -> a
pinafore> :type f i
: Maybe (a -> a)
pinafore> 
pinafore> let g: ((a -> a) & b) -> b = fn x => x
pinafore> :type g
: (a -> a & b) -> b
pinafore> :type g i
: a -> a
pinafore> 
pinafore> with Action
pinafore> let ur: WholeModel a -> Unit = fn _ => ()
pinafore> :type ur
: WholeModel a -> Unit
pinafore> :type newMem.WholeModel >>= fn model => pure (model, ())
: Action (WholeModel a *: Unit)
pinafore> :type newMem.WholeModel >>= fn model => pure (model, ((fn _ => ()) : WholeModel a -> Unit) model)
: Action (WholeModel a *: Unit)
pinafore> :type fn model => pure (model, ur model)
: (a & WholeModel b) -> Action (a *: Unit)
pinafore> :type newMem.WholeModel >>= fn model => pure (model, ur model)
: Action (WholeModel a *: Unit)
pinafore> <END>
