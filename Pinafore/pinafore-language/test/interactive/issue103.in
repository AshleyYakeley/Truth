let f: ((a -> a) & b) -> Maybe b = Just
let i: a -> a = fn x => x;
:type f
:type i
:type f i

let g: ((a -> a) & b) -> b = fn x => x
:type g
:type g i

let ur: WholeModel a -> Unit = fn _ => ()
:type ur
:type newMem.WholeModel >>= fn model => return (model, ())
:type newMem.WholeModel >>= fn model => return (model, ((fn _ => ()) : WholeModel a -> Unit) model)
:type fn model => return (model, ur model)
:type newMem.WholeModel >>= fn model => return (model, ur model)
