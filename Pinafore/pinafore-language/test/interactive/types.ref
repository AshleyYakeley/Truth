pinafore> let opentype P
pinafore> let opentype Q
pinafore> let subtype P <: Q
pinafore> let p = point.OpenEntity @P !"p"
pinafore> let q = point.OpenEntity @Q !"q"
pinafore> with Attribute
pinafore> with Store
pinafore> store <- openDefault.Store
pinafore> let pp = property @P @P !"pp" store
pinafore> let qp = property @Q @P !"qp" store
pinafore> :t pp
: Property P P
pinafore> :t pp !$ {p}
: WholeModel P
pinafore> :t pp !$ {q}
<input>:13:7: cannot convert WholeModel P -> WholeModel P+ <: WholeModel +Q -> a-
 <input>:13:7: cannot convert WholeModel +Q+ <: WholeModel P-
  <input>:13:7: cannot convert Q+ <: P-
   <input>:13:7: no ground conversion for Q <: P
pinafore> :t qp !$ {p}
: WholeModel P
pinafore> :t qp !$ {q}
: WholeModel P
pinafore> :t fn x => x <> x
: List a -> List a
pinafore> let f = fn x => x <> x
pinafore> :t f
: List a -> List a
pinafore> :t fn x => x <>.List1 x
: List1.List a -> List1.List a
pinafore> let g = fn x => x <>.List1 x
pinafore> :t g
: List1.List a -> List1.List a
pinafore> <END>
